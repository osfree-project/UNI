/*** DosProfile API support */

abi os2386;



   /*** Perfview API support */

   APIRET APIENTRY DosTmrQueryFreq(PULONG pulTmrFreq);

   APIRET APIENTRY DosTmrQueryTime(PQWORD pqwTmrTime);

   APIRET APIENTRY DosRegisterPerfCtrs(PBYTE pbDataBlk,
                                       PBYTE pbTextBlk,
                                       ULONG flFlags);

   /* DosProfile ordinal number */

   #define PROF_ORDINAL        133

   /* DosProfile usType */

   #define PROF_SYSTEM           0
   #define PROF_USER             1
   #define PROF_USEDD            2
   #define PROF_KERNEL           4
   #define PROF_VERBOSE          8
   #define PROF_ENABLE          16

   /* DosProfile usFunc */

   #define PROF_ALLOC            0
   #define PROF_CLEAR            1
   #define PROF_ON               2
   #define PROF_OFF              3
   #define PROF_DUMP             4
   #define PROF_FREE             5

   /* DosProfile tic count granularity (DWORD) */

   #define PROF_SHIFT            2

   /* DosProfile module name string length */

   #define PROF_MOD_NAME_SIZE   10

   /* DosProfile error code for end of data */

   #define PROF_END_OF_DATA     13

   /* defines and structures for DosQuerySysState */

   /* record types */
   #define QS_PROCESS      0x0001
   #define QS_SEMAPHORE    0x0002
   #define QS_MTE          0x0004
   #define QS_FILESYS      0x0008
   #define QS_SHMEMORY     0x0010
   #define QS_DISK         0x0020
   #define QS_HWCONFIG     0x0040
   #define QS_NAMEDPIPE    0x0080
   #define QS_THREAD       0x0100
   #define QS_MODVER       0x0200

   /* valid EntityList bit settings */
   #define QS_SUPPORTED    (QS_PROCESS|QS_SEMAPHORE|QS_MTE|QS_FILESYS|QS_SHMEMORY|QS_MODVER)

   /* All structures must be padded to dword boundaries if necessary  */
   /* The semicolon that is needed to terminate the structure field   */
   /* must be added in the structure definition itself, because H2INC */
   /* ignores it in a #define statement. */
   #define PADSHORT        USHORT        pad_sh
   #define PADCHAR         UCHAR         pad_ch

   #define QS_END          0L       /* last FILESYS record */

   /* Global Record structure
    * Holds all global system information. Placed first in user buffer
    */
   typedef struct _QSGREC {  /* qsGrec */
           ULONG         cThrds;
           ULONG         c32SSem;
           ULONG         cMFTNodes;
   } QSGREC;

   /* Thread Record structure
    *      Holds all per thread information.
    */
   typedef struct _QSTREC {  /* qsTrec */
           ULONG         RecType;        /* Record Type */
           USHORT        tid;            /* thread ID */
           USHORT        slot;           /* "unique" thread slot number */
           ULONG         sleepid;        /* sleep id thread is sleeping on */
           ULONG         priority;       /* thread priority */
           ULONG         systime;        /* thread system time */
           ULONG         usertime;       /* thread user time */
           UCHAR         state;          /* thread state */
           PADCHAR;
           PADSHORT;
   } QSTREC;

   /* Process Record structure
    *      Holds all per process information.
    *      ________________________________
    *      |       RecType                 |
    *      |-------------------------------|
    *      |       pThrdRec                |----|
    *      |-------------------------------|    |
    *      |       pid                     |    |
    *      |-------------------------------|    |
    *      |       ppid                    |    |
    *      |-------------------------------|    |
    *      |       type                    |    |
    *      |-------------------------------|    |
    *      |       stat                    |    |
    *      |-------------------------------|    |
    *      |       sgid                    |    |
    *      |-------------------------------|    |
    *      |       hMte                    |    |
    *      |-------------------------------|    |
    *      |       cTCB                    |    |
    *      |-------------------------------|    |
    *      |       c32PSem                 |    |
    *      |-------------------------------|    |
    *      |       p32SemRec               |----|---|
    *      |-------------------------------|    |   |
    *      |       c16Sem                  |    |   |
    *      |-------------------------------|    |   |
    *      |       cLib                    |    |   |
    *      |-------------------------------|    |   |
    *      |       cShrMem                 |    |   |
    *      |-------------------------------|    |   |
    *      |       cFS                     |    |   |
    *      |-------------------------------|    |   |
    *      |       p16SemRec               |----|---|----|
    *      |-------------------------------|    |   |    |
    *      |       pLibRec                 |----|---|----|------|
    *      |-------------------------------|    |   |    |      |
    *      |       pShrMemRec              |----|---|----|------|----|
    *      |-------------------------------|    |   |    |      |    |
    *      |       pFSRec                  |----|---|----|------|----|-----|
    *      |-------------------------------|    |   |    |      |    |     |
    *      |       32SemPPRUN[0]           |<---|---|    |      |    |     |
    *      |          .                    |    |        |      |    |     |
    *      |          .                    |    |        |      |    |     |
    *      |          .                    |    |        |      |    |     |
    *      |       32SemPPRUN[c32PSem-1]   |    |        |      |    |     |
    *      |-------------------------------|    |        |      |    |     |
    *      |       16SemIndx[0]            |<---|--------|      |    |     |
    *      |          .                    |    |               |    |     |
    *      |          .                    |    |               |    |     |
    *      |          .                    |    |               |    |     |
    *      |       16SemIndx[c16Sem-1]     |    |               |    |     |
    *      |-------------------------------|    |               |    |     |
    *      |       hmte[0] (or "name str") |<---|---------------|    |     |
    *      |          .                    |    |                    |     |
    *      |          .                    |    |                    |     |
    *      |          .                    |    |                    |     |
    *      |       hmte[cLib-1]            |    |                    |     |
    *      |-------------------------------|    |                    |     |
    *      |       hshmem[0]               |<---|--------------------|     |
    *      |          .                    |    |                          |
    *      |          .                    |    |                          |
    *      |          .                    |    |                          |
    *      |       hshmem[cShrMem-1]       |    |                          |
    *      |-------------------------------|    |                          |
    *      |       fsinfo[0]               |<---|--------------------------|
    *      |          .                    |    |
    *      |          .                    |    |
    *      |          .                    |    |
    *      |       fsinfo[cFS-1]           |    |
    *      |-------------------------------|    |
    *                                      <-----
    *      NOTE that the process name string will be stored in place of hmtes
    *              if MTE information is NOT being requested.
    *      NOTE that following this structure in the user buffer is
    *              an array c32Sems long of PRUN structures for 32 bit sems
    *              an array c16Sems long of indices for 16 bit sems
    *              the process name string
    */
   typedef struct _QSPREC {  /* qsPrec */
           ULONG         RecType;        /* type of record being processed */
           QSTREC    FAR *pThrdRec;      /* ptr to thread recs for this proc */
           USHORT        pid;            /* process ID */
           USHORT        ppid;           /* parent process ID */
           ULONG         type;           /* process type */
           ULONG         stat;           /* process status */
           ULONG         sgid;           /* process screen group */
           USHORT        hMte;           /* program module handle for process */
           USHORT        cTCB;           /* # of TCBs in use */
           ULONG         c32PSem;        /* # of private 32-bit sems in use */
           VOID      FAR *p32SemRec;     /* pointer to head of 32bit sem info */
           USHORT        c16Sem;         /* # of 16 bit system sems in use */
           USHORT        cLib;           /* number of runtime linked libraries */
           USHORT        cShrMem;        /* number of shared memory handles */
           USHORT        cFH;            /* number of open files */
                                         /* NOTE: cFH is size of active part of */
                                         /*       handle table if QS_FILE specified */
           USHORT   FAR  *p16SemRec;     /* pointer to head of 16 bit sem info */
           USHORT   FAR  *pLibRec;       /* ptr to list of runtime libraries */
           USHORT   FAR  *pShrMemRec;    /* ptr to list of shared mem handles */
           USHORT   FAR  *pFSRec;        /* pointer to list of file handles */
                                         /* 0xFFFF means it's closed, otherwise */
                                         /*       it's an SFN if non-zero */
   } QSPREC;

   /*
    *      16 bit system semaphore structure
    *      ________________________________
    *      |       NextRec                 |----|
    *      |-------------------------------|    |
    *      |SysSemData     :               |    |
    *      |       SysSemOwner             |    |
    *      |       SysSemFlag              |    |
    *      |       SysSemRecCnt            |    |
    *      |       SysSemProcCnt           |    |
    *      |-------------------------------|    |
    *      |-------------------------------|    |
    *      |-------------------------------|    |
    *      |       SysSemPtr               |    |
    *      |-------------------------------|    |
    *      |SysSemName:                    |    |
    *      |       "pathname"              |    |
    *      |-------------------------------|    |
    *                                      <-----
    */


   /* SysSemFlag values */

   #define QS_SYSSEM_WAITING 0x01               /* a thread is waiting on the sem */
   #define QS_SYSSEM_MUXWAITING 0x02            /* a thread is muxwaiting on the sem */
   #define QS_SYSSEM_OWNER_DIED 0x04            /* the process/thread owning the sem died */
   #define QS_SYSSEM_EXCLUSIVE 0x08             /* indicates a exclusive system semaphore */
   #define QS_SYSSEM_NAME_CLEANUP 0x10          /* name table entry needs to be removed */
   #define QS_SYSSEM_THREAD_OWNER_DIED 0x20     /* the thread owning the sem died */
   #define QS_SYSSEM_EXITLIST_OWNER 0x40        /* the exitlist thread owns the sem */

   typedef struct _QSS16REC {   /* qsS16rec */
           ULONG         NextRec;        /* offset to next record in buffer */
                                         /* System Semaphore Table Structure */
           USHORT        SysSemOwner ;   /* thread owning this semaphore */
           UCHAR         SysSemFlag ;    /* system semaphore flag bit field */
           UCHAR         SysSemRefCnt ;  /* number of references to this sys sem */
           UCHAR         SysSemProcCnt ; /* number of requests for this owner */
           UCHAR         SysSemPad ;     /* pad byte to round structure up to word */
           USHORT        pad_sh;
           USHORT        SemPtr;         /* RMP SysSemPtr field */
           CHAR          SemName;        /* start of semaphore name string */
   } QSS16REC;

   typedef struct _QSS16HEADREC {  /* qsS16Hrec */
           ULONG         SRecType;       /* offset of SysSemDataTable */
           ULONG         SpNextRec;      /* overlays NextRec of 1st qsS16rec_t*/
           ULONG         S32SemRec;
           ULONG         S16TblOff;
           ULONG         pSem16Rec;
   } QSS16HEADREC;

   /*
    *      System wide Shared Mem information
    *      ________________________________
    *      |       MemNextRec              |
    *      |-------------------------------|
    *      |       hmem                    |
    *      |-------------------------------|
    *      |       sel                     |
    *      |-------------------------------|
    *      |       refcnt                  |
    *      |-------------------------------|
    *      |       Memname                 |
    *      |_______________________________|
    *
    */
   typedef struct _QSMREC {  /* qsMrec */
           ULONG         MemNextRec;       /* offset to next record in buffer */
           USHORT        hmem;             /* handle for shared memory */
           USHORT        sel;              /* selector */
           USHORT        refcnt;           /* reference count */
           CHAR          Memname;          /* start of shared memory name string */
   } QSMREC;

   /*
    *      32 bit system semaphore structure
    *      ________________________________
    *      |       pNextRec                |-----------------.
    *      |-------------------------------|                 |
    *      |       flags                   |                 |
    *      |-------------------------------|                 |
    *      |       pad                     |                 |
    *      |-------------------------------|                 |
    *      |       *pName                  |----> pointer to |
    *      |-------------------------------|      semaphore  |
    *      |       QSHUN                   |      name       |
    *      |-------------------------------|                 |
    *      |       OpenCt                  |                 |
    *      |-------------------------------|                 |
    *      |       indexName               |                 |
    *      |-------------------------------|                 |
    *      |       blockid                 |                 |
    *      |-------------------------------|                 |
    *      |       OpenQ[0]                |                 |
    *      |-------------------------------|                 |
    *      |       ...                     |                 |
    *      |-------------------------------|                 |
    *      |       OpenQ[OpenCt-1]         |                 |
    *      |-------------------------------|                 |
    *      |          .                    |                 |
    *      |          .                    |                 |
    *      |          .                    |                 |
    *      |-------------------------------|<----------------'
    *      |       pNextRec                |------------------>
    *      |-------------------------------|
    *
    */

   /*
    *  32- bit Semaphore flags
    */

   #define QS_DC_SEM_SHARED   0x0001   //  Shared Mutex, Event or MUX semaphore
   #define QS_DCMW_WAIT_ANY   0x0002   //  Wait on any event/mutex to occur
   #define QS_DCMW_WAIT_ALL   0x0004   //  Wait on all events/mutexs to occur
   #define QS_DCM_MUTEX_SEM   0x0008   //  Mutex semaphore
   #define QS_DCE_EVENT_SEM   0x0010   //  Event semaphore
   #define QS_DCMW_MUX_SEM    0x0020   //  Muxwait semaphore
   #define QS_DC_SEM_PM       0x0040   //  PM Shared Event Semphore
   #define QS_DE_POSTED       0x0040   //  event sem is in the posted state
   #define QS_DM_OWNER_DIED   0x0080   //  The owning process died
   #define QS_DMW_MTX_MUX     0x0100   //  MUX contains mutex sems
   #define QS_DHO_SEM_OPEN    0x0200   //  Device drivers have opened this semaphore
   #define QS_DE_16BIT_MW     0x0400   //  Part of a 16-bit MuxWait
   #define QS_DCE_POSTONE     0x0800   //  Post one flag event semaphore
   #define QS_DCE_AUTORESET   0x1000   //  Auto-reset event semaphore

   typedef struct _QSOPENQ {  /* qsopenq */
           USHORT          pidOpener;      /* process id of opening process */
           USHORT          OpenCt;         /* number of opens for this process */
   } QSOPENQ;

   typedef struct _QSEVENT {  /* qsevent */
           ULONG           *pMuxQ;         /* pointer to the mux queue */
           USHORT          PostCt;         /* # of posts */
   } QSEVENT;

   typedef struct _QSMUTEX {  /* qsmutex */
           ULONG           *pMuxQ;         /* pointer to the mux queue */
           USHORT          ReqCt;          /* # of requests */
           USHORT          SlotNum;        /* slot # of owning thread */
   } QSMUTEX;

   typedef struct _QSMUX {  /* qsmux */
           VOID            *pSemRec;       /* array of SEMRECORD entries */
           USHORT          cSemRec;        /* count of semaphore records */
           USHORT          WaitCt;         /* # threads waiting on the mux */
   } QSMUX;

   /* XLATOFF */
   typedef union _QSHUN {  /* qsshun */
           QSEVENT         qsSEvt;         /* shared event sem */
           QSMUTEX         qsSMtx;         /* shared mutex sem */
           QSMUX           qsSMux;         /* shared mux sem */
   } QSHUN;
   /* XLATON */

   /* ASM

   QSHUN UNION
   qsshun_qsSEvt    DB  SIZE QSEVENT DUP (?)
   qsshun_qsSMtx    DB  SIZE QSMUTEX DUP (?)
   qsshun_qsSMux    DB  SIZE QSMUX DUP (?)
   QSHUN ENDS
   */

   typedef struct _QSS32REC {  /* qsS32rec */
           VOID            *pNextRec;      /* pointer to next record in buffer */
           USHORT          flags;          /* QS_xxx flags */
           PADSHORT;
           UCHAR           *pName;         /* pointer to semaphore name */
           QSHUN           qsh;            /* qstate version of SHUN record */
           ULONG           blockid;        /* kernel block id */
           USHORT          index;          /* low word of sem handle */
           USHORT          OpenCt;         /* count of OpenQs */
           QSOPENQ         OpenQ[1];       /* variable length array of OpenQs */
   } QSS32REC;

   /*
    *      System wide MTE information
    *      ________________________________
    *      |       pNextRec                |----|
    *      |-------------------------------|    |
    *      |       hmte                    |    |
    *      |-------------------------------|    |
    *      |       ctImpMod                |    |
    *      |-------------------------------|    |
    *      |       ctObj                   |    |
    *      |-------------------------------|    |
    *      |       pObjInfo                |----|----------|
    *      |-------------------------------|    |          |
    *      |       pName                   |----|----|     |
    *      |-------------------------------|    |    |     |
    *      |       imported module handles |    |    |     |
    *      |          .                    |    |    |     |
    *      |          .                    |    |    |     |
    *      |          .                    |    |    |     |
    *      |-------------------------------| <--|----|     |
    *      |       "pathname"              |    |          |
    *      |-------------------------------| <--|----------|
    *      |       Object records          |    |
    *      |       (if requested)          |    |
    *      |_______________________________|    |
    *                                      <-----
    *      NOTE that if the level bit is set to QS_MTE, the base Lib record will be followed
    *      by a series of object records (QSLOBJREC); one for each object of the
    *      module.
    */

   typedef struct _QSLOBJREC {  /* qsLOrec */
           ULONG         oaddr;  /* object address */
           ULONG         osize;  /* object size */
           ULONG         oflags; /* object flags */
   } QSLOBJREC;

   typedef struct _QSLREC {  /* qsLrec */
           VOID  FAR        *pNextRec;      /* pointer to next record in buffer */
           USHORT           hmte;           /* handle for this mte */
           USHORT           fFlat;          /* true if 32 bit module */
           ULONG            ctImpMod;       /* # of imported modules in table */
           ULONG            ctObj;          /* # of objects in module (mte_objcnt)*/
           QSLOBJREC   FAR  *pObjInfo;      /* pointer to per object info if any */
           UCHAR     FAR    *pName;         /* -> name string following struc */
   } QSLREC;

   /* Used for 9th bit (Extended Module Data Summary)*/
   typedef struct _QSEXLREC {  /* qsELrec */
           struct          _QSEXLREC *next;  /*  Pointer to next Extended Module Data */
           USHORT          hndmod;           /*  Module Handle */
           USHORT          pid;              /*  Process ID */
           USHORT          type;             /*  Type of Module */
           ULONG           refcnt;           /*  Size of reference array */
           ULONG           segcnt;           /*  Number of segments in module */
           VOID            *_reserved_;
           UCHAR FAR       *name;            /*  Pointer to Module Name  */
           ULONG           ModuleVersion;    /*  Module version value  */
           UCHAR FAR       *ShortModName;    /*  New Pointer to Module short name */
           ULONG           modref;           /*  Start of array of handles of module */
   } QSEXLREC;

   /*
    *      System wide FILE information
    *      ________________________________
    *      |       RecType                 |
    *      |-------------------------------|
    *      |       pNextRec                |-------|
    *      |-------------------------------|       |
    *      |       ctSft                   |       |
    *      |-------------------------------|       |
    *      |       pSft                    |---|   |
    *      |-------------------------------|   |   |
    *      |       name                    |   |   |
    *      |-------------------------------|<--|   |
    *      |       qsSft[0]                |       |
    *      |-------------------------------|       |
    *      |       ...                     |       |
    *      |-------------------------------|       |
    *      |       qsSft[ctSft -1]         |       |
    *      |_______________________________|       |
    *      |       name                    |       |
    *      |_______________________________|       |
    *                                      <-------|
    */
   typedef struct _QSSFT {  /* qsSft */
           USHORT        sfn;            /* SFN sf_fsi.sfi_selfSFN */
           USHORT        refcnt;         /* sf_ref_count */
           USHORT        flags;          /* sf_flags */
           USHORT        flags2;         /* sf_flags2 */
           USHORT        mode;           /* sf_fsi.sfi_mode - mode of access */
           USHORT        mode2;          /* sf_fsi.sfi_mode2 - mode of access */
           ULONG         size;           /* sf_fsi.sfi_size */
           USHORT        hVPB;           /* sf_fsi.sfi_hVPB handle of volume */
           USHORT        attr;           /* sf_attr */
           PADSHORT;
   } QSSFT;

   typedef struct _QSFREC {  /* qsFrec */
           ULONG         RecType;        /* Record Type */
           VOID          *pNextRec;      /* pointer to next record in buffer */
           ULONG         ctSft;          /* # sft entries for this MFT entry */
           QSSFT         *pSft;          /* -> start of sft entries in buf */
   } QSFREC;


   /* Pointer Record Structure
    *      This structure is the first in the user buffer.
    *      It contains pointers to heads of record types that are loaded
    *      into the buffer.
    */

   typedef struct _QSPTRREC {  /* qsPRec */
           QSGREC          *pGlobalRec;
           QSPREC          *pProcRec;      /* ptr to head of process records */
           QSS16HEADREC    *p16SemRec;     /* ptr to head of 16 bit sem recds */
           QSS32REC        *p32SemRec;     /* ptr to head of 32 bit sem recds */
           QSMREC          *pMemRec;       /* ptr to head of shared mem recs */
           QSLREC          *pLibRec;       /* ptr to head of mte records */
           QSMREC          *pShrMemRec;    /* ptr to head of shared mem records */
           QSFREC          *pFSRec;        /* ptr to head of file sys records */
   } QSPTRREC;

   APIRET  APIENTRY DosQuerySysState(ULONG EntityList,
                                     ULONG EntityLevel,
                                     PID pid,
                                     TID tid,
                                     PVOID pDataBuf,
                                     ULONG cbBuf);

   APIRET  APIENTRY DosAliasPerfCtrs(ULONG ulRangeType,
                                     ULONG ulInfo,
                                     PBYTE *ppbRangeStart,
                                     ULONG *pulRangeSize);

   #ifdef INCL_32  /* BOOL32 is only defined in INCL_32 */
#ifdef __cplusplus
   APIRET  APIENTRY DosConfigurePerf(ULONG ulEntityType,
                                     ULONG ulConfigType,
                                     ULONG ulInfo1,
                                     ULONG ulInfo2,
                                     PCSZ  pszConfigSpec,
                                     BOOL32 fExclude);
#else
   APIRET  APIENTRY DosConfigurePerf(ULONG ulEntityType,
                                     ULONG ulConfigType,
                                     ULONG ulInfo1,
                                     ULONG ulInfo2,
                                     PSZ pszConfigSpec,
                                     BOOL32 fExclude);
#endif
   #endif

   APIRET  APIENTRY DosDeconPerf(VOID);

   APIRET APIENTRY DosPerfSysCall(ULONG ulCommand,
                                  ULONG ulParm1,
                                  ULONG ulParm2,
                                  ULONG ulParm3);

