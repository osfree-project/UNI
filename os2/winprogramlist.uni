module winprogramlist;


      (*** maximum path length *********************************************)
      const MAXPATHL= 128;

      (*** root group handle ***********************************************)
      const SGH_ROOT    =  -1;

      type HPROGARRAY=structure
          ahprog: array[1] of HPROGRAM;
        end;
      type PHPROGARRAY=^HPROGARRAY;


   type PROGCATEGORY=ULONG;       (* progc *)

   type PPROGCATEGORY=^PROGCATEGORY;

   (*** values acceptable for PROGCATEGORY for PM groups *******************)
   const PROG_DEFAULT              =0;
   const PROG_FULLSCREEN           =1;
   const PROG_WINDOWABLEVIO        =2;
   const PROG_PM                   =3;
   const PROG_GROUP                =5;
   const PROG_REAL                 =4;
   const PROG_VDM                  =4;
   const PROG_WINDOWEDVDM          =7;
   const PROG_DLL                  =6;
   const PROG_PDD                  =8;
   const PROG_VDD                  =9;
   const PROG_WINDOW_REAL          =10;
   const PROG_WINDOW_PROT          =11;
   const PROG_30_STD               =11;
   const PROG_WINDOW_AUTO          =12;
   const PROG_SEAMLESSVDM          =13;
   const PROG_30_STDSEAMLESSVDM    =13;
   const PROG_SEAMLESSCOMMON       =14;
   const PROG_30_STDSEAMLESSCOMMON =14;
   const PROG_31_STDSEAMLESSVDM    =15;
   const PROG_31_STDSEAMLESSCOMMON =16;
   const PROG_31_ENHSEAMLESSVDM    =17;
   const PROG_31_ENHSEAMLESSCOMMON =18;
   const PROG_31_ENH               =19;
   const PROG_31_STD               =20;
   const PROG_DOS_GAME             =21;
   const PROG_WIN_GAME             =22;
   const PROG_DOS_MODE             =23;
   const PROG_RESERVED             =255;

      type PROGTYPE=structure
         progc: PROGCATEGORY;
         fbVisible: ULONG;
        end;
      type PPROGTYPE=^PROGTYPE;


      (*** visibility flag for PROGTYPE structure **************************)
      const SHE_VISIBLE         = $00;
      const SHE_INVISIBLE       = $01;
      const SHE_RESERVED        = $FF;

      (*** Protected group flag for PROGTYPE structure *********************)
      const SHE_UNPROTECTED     = $00;
      const SHE_PROTECTED       = $02;



      (*** Structures associated with 'Prf' calls **************************)
      type PROGDETAILS=structure    (* progde *)
         Length: ULONG;         (* set this to sizeof(PROGDETAILS)  *)
         progt: PROGTYPE;
         pszTitle: PSZ;       (* any of the pointers can be NULL  *)
         pszExecutable: PSZ;
         pszParameters: PSZ;
         pszStartupDir: PSZ;
         pszIcon: PSZ;
         pszEnvironment: PSZ; (* this is terminated by  /0/0      *)
         swpInitial: SWP;     (* this replaces XYWINSIZE          *)
      end;
      type  PPROGDETAILS=^PROGDETAILS;

      type PROGTITLE=structure             (* progti *)
         hprog: HPROGRAM;
         progt: PROGTYPE;
         pszTitle: PSZ;
        end;
      type PPROGTITLE=^PROGTITLE;

      (*** Program List API Function Definitions ***************************)


      (*** Program List API available 'Prf' calls **************************)

      function PrfQueryProgramTitles(in hini: HINI;
                                           in hprogGroup: HPROGRAM;
                                           out pTitles: PROGTITLE;
                                           in cchBufferMax: ULONG;
                                           out pulCount: ULONG): ULONG;

      (*********************************************************************)
      (*  NOTE: string information is concatanated after the array of      *)
      (*        PROGTITLE structures so you need to allocate storage       *)
      (*        greater than sizeof(PROGTITLE)*cPrograms to query programs *)
      (*        in a group.                                                *)
      (*                                                                   *)
      (*  PrfQueryProgramTitles recommended usage to obtain titles of all  *)
      (*  programs in a group (Hgroup=SGH_ROOT is for all groups):         *)
      (*                                                                   *)
      (*  BufLen = PrfQueryProgramTitles(Hini, Hgroup,                     *)
      (*                                  (PPROGTITLE)NULL, 0, &Count);    *)
      (*                                                                   *)
      (*  Alocate buffer of  Buflen                                        *)
      (*                                                                   *)
      (*  Len = PrfQueryProgramTitles(Hini, Hgroup, (PPROGTITLE)pBuffer,   *)
      (*                               BufLen, pCount);                    *)
      (*                                                                   *)
      (*********************************************************************)

      function PrfAddProgram(in hini: HINI;
                                      in pDetails: PPROGDETAILS;
                                      in hprogGroup: HPROGRAM): HPROGRAM;

      function PrfChangeProgram(in hini: HINI;
                                         in hprog: HPROGRAM;
                                         in pDetails: PPROGDETAILS): BOOL;

      function PrfQueryDefinition(in hini: HINI;
                                           in hprog: HPROGRAM;
                                           out pDetails: PROGDETAILS;
                                           in cchBufferMax: ULONG): ULONG;

      (*********************************************************************)
      (*  NOTE: string information is concatanated after the PROGDETAILS   *)
      (*        field structure so you need to allocate storage greater    *)
      (*        than sizeof(PROGDETAILS) to query programs                 *)
      (*                                                                   *)
      (*  PrfQueryDefinition recomended usage:                             *)
      (*                                                                   *)
      (*  bufferlen = PrfQueryDefinition(Hini,Hprog,(PPROGDETAILS)NULL,0)  *)
      (*                                                                   *)
      (*  Alocate buffer of bufferlen bytes                                *)
      (*  set Length field (0 will be supported)                           *)
      (*                                                                   *)
      (*  (PPROGDETAILS)pBuffer->Length=sizeof(PPROGDETAILS)               *)
      (*                                                                   *)
      (*  len = PrfQueryDefinition(Hini, Hprog, (PPROGDETAILS)pBuffer,     *)
      (*      bufferlen)                                                   *)
      (*********************************************************************)

      function PrfRemoveProgram(in hini: HINI;
                                         in hprog: HPROGRAM): BOOL;

      function PrfQueryProgramHandle(in hini: HINI;
                                              in pszExe: PSZ;
                                              out phprogArray: HPROGARRAY;
                                              in cchBufferMax: ULONG;
                                              out pulCount: ULONG): ULONG;

      function PrfCreateGroup(in hini: HINI;
                                       in pszTitle: PSZ;
                                       in chVisibility: UCHAR): HPROGRAM;

      function PrfDestroyGroup(in hini: HINI;
                                        in hprogGroup: HPROGRAM): BOOL;

      function PrfQueryProgramCategory(in hini: HINI; in pszExe: PSZ): PROGCATEGORY;

      function WinStartApp(in hwndNotify: HWND;
                                in pDetails: PPROGDETAILS;
                                in pszParams: PSZ;
                                in Reserved: PVOID;
                                in fbOptions: ULONG): HAPP;

      (*** bit values for Options parameter ********************************)
      const SAF_VALIDFLAGS  = $001F;

      const SAF_INSTALLEDCMDLINE  = $0001;     (* use installed parameters *)
      const SAF_STARTCHILDAPP     = $0002;     (* related application      *)
      const SAF_MAXIMIZED         = $0004;     (* Start App maximized *)
      const SAF_MINIMIZED         = $0008;     (* Start App minimized, if !SAF_MAXIMIZED *)
      const SAF_BACKGROUND        = $0010;     (* Start app in the background *)


      function WinTerminateApp(in happ: HAPP): BOOL;

end.

