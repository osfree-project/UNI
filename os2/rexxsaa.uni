module rexxsaa;

(*********************************************************************)
(*                                                                   *)
(*                            Common                                 *)
(*                                                                   *)
(*********************************************************************)

(* This section defines return codes and constants that are the      *)
(* same for both 16-bit and 32-bit REXX calls.                       *)

(***    Structure for external interface string (RXSTRING) *)

type RXSTRING=structure          (* rxstr *)
        strlength: ULONG;           (*   length of string         *)
        strptr: PCH;              (*   pointer to string        *)
  end;

type PRXSTRING=^RXSTRING;       (* pointer to a RXSTRING      *)

const RXAUTOBUFLEN     =    256;


(***    Structure for system exit block (RXSYSEXIT) 32-bit *)

type RXSYSEXIT=structure            (* syse *)
      sysexit_name: PSZ;                  (* subcom enviro for sysexit  *)
      sysexit_code: LONG;                 (* sysexit function code      *)
  end;

type PRXSYSEXIT=^RXSYSEXIT;         (* pointer to a RXSYSEXIT     *)


(***    Macros for RXSTRING manipulation                   *)

(*
const RXNULLSTRING(r)      (!(r).strptr)
const RXZEROLENSTRING(r)   ((r).strptr && !(r).strlength)
const RXVALIDSTRING(r)     ((r).strptr && (r).strlength)
const RXSTRLEN(r)          (RXNULLSTRING(r)?0L:(r).strlength)
const RXSTRPTR(r)          (r).strptr
const MAKERXSTRING(r,p,l)  {(r).strptr=(PCH)p;(r).strlength=(ULONG)l;}
*)

(*** Call type codes for use on interpreter startup                  *)
const RXCOMMAND       =0;              (* Program called as Command  *)
const RXSUBROUTINE    =1;              (* Program called as Subroutin*)
const RXFUNCTION      =2;              (* Program called as Function *)

(***    Subcommand Interface defines*)
#ifdef INCL_RXSUBCOM


(***    Drop Authority for RXSUBCOM interface *)

const RXSUBCOM_DROPPABLE   = $00;     (* handler to be dropped by all*)
const RXSUBCOM_NONDROP     = $01;     (* process with same PID as the*)
                                      (* registrant may drop environ *)

(***    Return Codes from RXSUBCOM interface *)

const RXSUBCOM_ISREG       = $01;     (* Subcommand is registered    *)
const RXSUBCOM_ERROR       = $01;     (* Subcommand Ended in Error   *)
const RXSUBCOM_FAILURE     = $02;     (* Subcommand Ended in Failure *)
const RXSUBCOM_BADENTRY    = 1001;     (* Invalid Entry Conditions    *)
const RXSUBCOM_NOEMEM      = 1002;     (* Insuff stor to complete req *)
const RXSUBCOM_BADTYPE     = 1003;     (* Bad registration type.      *)
const RXSUBCOM_NOTINIT     = 1004;     (* API system not initialized. *)
const RXSUBCOM_OK          =  0;       (* Function Complete           *)
const RXSUBCOM_DUP         = 10;       (* Duplicate Environment Name- *)
                                      (* but Registration Completed  *)
const RXSUBCOM_MAXREG      = 20;       (* Cannot register more        *)
                                      (* handlers                    *)
const RXSUBCOM_NOTREG      = 30;       (* Name Not Registered         *)
const RXSUBCOM_NOCANDROP   = 40;       (* Name not droppable          *)
const RXSUBCOM_LOADERR     = 50;       (* Could not load function     *)
const RXSUBCOM_NOPROC      =127;       (* RXSUBCOM routine - not found*)

#endif (* INCL_RXSUBCOM for defines *)

(***    Shared Variable Pool Interface defines *)
#ifdef INCL_RXSHV

(***    Function Codes for Variable Pool Interface (shvcode) *)

const RXSHV_SET          = $00;       (* Set var from given value    *)
const RXSHV_FETCH        = $01;       (* Copy value of var to buffer *)
const RXSHV_DROPV        = $02;       (* Drop variable               *)
const RXSHV_SYSET        = $03;       (* Symbolic name Set variable  *)
const RXSHV_SYFET        = $04;       (* Symbolic name Fetch variable*)
const RXSHV_SYDRO        = $05;       (* Symbolic name Drop variable *)
const RXSHV_NEXTV        = $06;       (* Fetch "next" variable       *)
const RXSHV_PRIV         = $07;       (* Fetch private information   *)
const RXSHV_EXIT         = $08;       (* Set function exit value     *)

(***    Return Codes for Variable Pool Interface *)

const RXSHV_NOAVL        = 144;       (* Interface not available     *)

(***    Return Code Flags for Variable Pool Interface (shvret) *)

const RXSHV_OK           = $00;       (* Execution was OK            *)
const RXSHV_NEWV         = $01;       (* Variable did not exist      *)
const RXSHV_LVAR         = $02;       (* Last var trans via SHVNEXTV *)
const RXSHV_TRUNC        = $04;       (* Truncation occurred-Fetch   *)
const RXSHV_BADN         = $08;       (* Invalid variable name       *)
const RXSHV_MEMFL        = $10;       (* Out of memory failure       *)
const RXSHV_BADF         = $80;       (* Invalid funct code (shvcode)*)


(***    Structure of Shared Variable Request Block (SHVBLOCK) *)

type SHVBLOCK=structure            (* shvb *)
    shvnext: ^SHVBLOCK;       (* pointer to the next block   *)
    shvname: RXSTRING;       (* Pointer to the name buffer  *)
    shvvalue: RXSTRING;      (* Pointer to the value buffer *)
    shvnamelen: ULONG;    (* Length of the name value    *)
    shvvaluelen: ULONG;   (* Length of the fetch value   *)
    shvcode: UCHAR;       (* Function code for this block*)
    shvret: UCHAR;        (* Individual Return Code Flags*)
  end;

type PSHVBLOCK=^SHVBLOCK;

#endif (* INCL_RXSHV for defines *)

(***    External Function Interface *)
#ifdef INCL_RXFUNC

(***    Registration Type Identifiers for Available Function Table *)

const RXFUNC_DYNALINK     =  1;        (* Function Available in DLL  *)
const RXFUNC_CALLENTRY    =  2;        (* Registered as mem entry pt.*)


(***    Return Codes from RxFunction interface *)


const RXFUNC_OK           =  0;        (* REXX-API Call Successful   *)
const RXFUNC_DEFINED      = 10;        (* Function Defined in AFT    *)
const RXFUNC_NOMEM        = 20;        (* Not Enough Mem to Add      *)
const RXFUNC_NOTREG       = 30;        (* Funct Not Registered in AFT*)
const RXFUNC_MODNOTFND    = 40;        (* Funct Dll Module Not Found *)
const RXFUNC_ENTNOTFND    = 50;        (* Funct Entry Point Not Found*)
const RXFUNC_NOTINIT      = 60;        (* API not initialized        *)
const RXFUNC_BADTYPE      = 70;        (* Bad function type          *)
#endif (* INCL_RXFUNC for defines *)

(***   System Exits defines *)
#ifdef INCL_RXSYSEXIT

(***    Drop Authority for Rexx Exit interface *)

const RXEXIT_DROPPABLE     = $00;     (* handler to be dropped by all*)
const RXEXIT_NONDROP       = $01;     (* process with same PID as the*)
                                      (* registrant may drop environ *)


(***    Exit return actions *)

const RXEXIT_HANDLED      = 0;        (* Exit handled exit event     *)
const RXEXIT_NOT_HANDLED  = 1;        (* Exit passes on exit event   *)
const RXEXIT_RAISE_ERROR  = (-1);     (* Exit handler error occurred *)

(***    Return Codes from RXEXIT interface *)

const RXEXIT_ISREG         = $01;     (* Exit is registered          *)
const RXEXIT_ERROR         = $01;     (* Exit Ended in Error         *)
const RXEXIT_FAILURE       = $02;     (* Exit Ended in Failure       *)
const RXEXIT_BADENTRY    =  1001 ;    (* Invalid Entry Conditions    *)
const RXEXIT_NOEMEM      =  1002 ;    (* Insuff stor to complete req *)
const RXEXIT_BADTYPE     =  1003 ;    (* Bad registration type.      *)
const RXEXIT_NOTINIT     =  1004 ;    (* API system not initialized. *)
const RXEXIT_OK          =   0   ;    (* Function Complete           *)
const RXEXIT_DUP         =  10   ;    (* Duplicate Exit Name-        *)
                                      (* but Registration Completed  *)
const RXEXIT_MAXREG      =  20   ;    (* Cannot register more        *)
                                      (* handlers                    *)
const RXEXIT_NOTREG      =  30   ;    (* Name Not Registered         *)
const RXEXIT_NOCANDROP   =  40   ;    (* Name not droppable          *)
const RXEXIT_LOADERR     =  50   ;    (* Could not load function     *)
const RXEXIT_NOPROC      = 127   ;    (* RXEXIT routine - not found  *)



(* System Exit function and sub-function definitions *)

const RXENDLST   = 0;                 (* End of exit list.           *)
const RXFNC   = 2;                    (* Process external functions. *)
const    RXFNCCAL= 1;                 (* subcode value.              *)
const RXCMD   = 3;                    (* Process host commands.      *)
const    RXCMDHST= 1;                 (* subcode value.              *)
const RXMSQ   = 4;                    (* Manipulate queue.           *)
const    RXMSQPLL= 1;                 (* Pull a line from queue      *)
const    RXMSQPSH= 2;                 (* Place a line on queue       *)
const    RXMSQSIZ= 3;                 (* Return num of lines on queue*)
const    RXMSQNAM= 20;                (* Set active queue name       *)
const RXSIO   = 5;                    (* Session I/O.                *)
const    RXSIOSAY= 1;                 (* SAY a line to STDOUT        *)
const    RXSIOTRC= 2;                 (* Trace output                *)
const    RXSIOTRD= 3;                 (* Read from char stream       *)
const    RXSIODTR= 4;                 (* DEBUG read from char stream *)
const    RXSIOTLL= 5;                 (* Return linelength(N/A OS/2) *)
const RXHLT   = 7;                    (* Halt processing.            *)
const    RXHLTCLR= 1;                 (* Clear HALT indicator        *)
const    RXHLTTST= 2;                 (* Test HALT indicator         *)
const RXTRC   = 8;                    (* Test ext trace indicator.   *)
const    RXTRCTST= 1;                 (* subcode value.              *)
const RXINI   = 9;                    (* Initialization processing.  *)
const    RXINIEXT= 1;                 (* subcode value.              *)
const RXTER   =10;                    (* Termination processing.     *)
const    RXTEREXT= 1;                 (* subcode value.              *)
const RXNOOFEXITS= 11;                (* 1 + largest exit number.    *)

type PEXIT=PUCHAR;                 (* ptr to exit parameter block *)
#endif (* INCL_RXSYSEXIT for defines *)

(***    Asynchronous Request Interface defines *)
#ifdef INCL_RXARI

(***    Return Codes from Asynchronous Request interface *)

const RXARI_OK               =    0;  (* Interface completed         *)
const RXARI_NOT_FOUND        =    1;  (* Target program not found    *)
const RXARI_PROCESSING_ERROR =    2;  (* Error processing request    *)
#endif (* INCL_RXARI for defines *)

(***    Macro Space Interface defines *)
#ifdef INCL_RXMACRO

(***    Registration Search Order Flags *)

const RXMACRO_SEARCH_BEFORE     =  1;  (* Beginning of search order  *)
const RXMACRO_SEARCH_AFTER      =  2;  (* End of search order        *)


(***    Return Codes from RxMacroSpace interface *)

const RXMACRO_OK                 =0;  (* Macro interface completed   *)
const RXMACRO_NO_STORAGE         =1;  (* Not Enough Storage Available*)
const RXMACRO_NOT_FOUND          =2;  (* Requested function not found*)
const RXMACRO_EXTENSION_REQUIRED =3;  (* File ext required for save  *)
const RXMACRO_ALREADY_EXISTS     =4;  (* Macro functions exist       *)
const RXMACRO_FILE_ERROR         =5;  (* File I/O error in save/load *)
const RXMACRO_SIGNATURE_ERROR    =6;  (* Incorrect format for load   *)
const RXMACRO_SOURCE_NOT_FOUND   =7;  (* Requested cannot be found   *)
const RXMACRO_INVALID_POSITION   =8;  (* Invalid search order pos    *)
const RXMACRO_NOT_INIT           =9;  (* API not initialized         *)
#endif (* INCL_RXMACRO for defines *)

(*********************************************************************)
(*                                                                   *)
(*                            32-bit                                 *)
(*                                                                   *)
(*********************************************************************)

(***    Main Entry Point to the REXXSAA Interpreter *)


function RexxStart(ArgC: LONG;                        (* Num of args passed to rexx *)
         ArgV: PRXSTRING;                    (* Array of args passed to rex *)
         Path: PCSZ;                          (* [d:][path] filename[.ext]  *)
         Storage: PRXSTRING;                    (* Loc of rexx proc in memory *)
         Env: PCSZ;                          (* ASCIIZ initial environment.*)
         Typ: LONG;                        (* type (command,subrtn,funct) *)
         SysExit: PRXSYSEXIT;                   (* SysExit env. names &  codes *)
         RetCode: PSHORT;                       (* Ret code from if numeric   *)
         RetValue: PRXSTRING): LONG;                  (* Retvalue from the rexx proc *)


(***    Subcommand Interface *)
#ifdef INCL_RXSUBCOM


(* This type simplifies coding of a Subcommand handler.           *)
type RexxSubcomHandler=function RexxSubcomHandler(PRXSTRING,
                                PUSHORT,
                                PRXSTRING): ULONG;

(***   RexxRegisterSubcomDll -- Register a DLL entry point           *)
(***   as a Subcommand handler *)

function RexxRegisterSubcomDll(PCSZ ,                          (* Name of subcom handler     *)
         PCSZ ,                          (* Name of DLL                *)
         PCSZ ,                          (* Name of procedure in DLL   *)
         PUCHAR,                       (* User area                  *)
         ULONG  );                     (* Drop authority.            *)

(***   Uppercase Entry Point Name *)
const REXXREGISTERSUBCOMDLL  RexxRegisterSubcomDll


(***   RexxRegisterSubcomExe -- Register an EXE entry point          *)
(***   as a Subcommand handler *)

function RexxRegisterSubcomExe(PCSZ ,                          (* Name of subcom handler     *)
         PFN,                          (* address of handler in EXE  *)
         PUCHAR);                      (* User area                  *)

(***   Uppercase Entry Point Name *)
const REXXREGISTERSUBCOMEXE  RexxRegisterSubcomExe



(***    RexxQuerySubcom - Query an environment for Existance *)

function RexxQuerySubcom(PCSZ ,                          (* Name of the Environment    *)
         PCSZ ,                          (* DLL Module Name            *)
         PUSHORT,                      (* Stor for existance code    *)
         PUCHAR );                     (* Stor for user word         *)

(***   Uppercase Entry Point Name *)
const REXXQUERYSUBCOM  RexxQuerySubcom



(***    RexxDeregisterSubcom - Drop registration of a Subcommand     *)
(***    environment *)

function RexxDeregisterSubcom(PCSZ ,                          (* Name of the Environment    *)
         PCSZ  );                        (* DLL Module Name            *)

(***   Uppercase Entry Point Name *)
const REXXDEREGISTERSUBCOM  RexxDeregisterSubcom


(* XLATON *)
#endif (* INCL_RXSUBCOM *)



(***    Shared Variable Pool Interface *)
#ifdef INCL_RXSHV

(* XLATOFF *)

(***    RexxVariablePool - Request Variable Pool Service *)

function RexxVariablePool(PSHVBLOCK);                  (* Pointer to list of SHVBLOCKs *)

(***   Uppercase Entry Point Name *)
const REXXVARIABLEPOOL  RexxVariablePool
(* XLATON *)


#endif (* INCL_RXSHV *)


(***    External Function Interface *)
#ifdef INCL_RXFUNC

(* XLATOFF *)

(* This type simplifies coding of an External Function.           *)
type ULONG APIENTRY RexxFunctionHandler(PUCHAR,
                                  ULONG,
                                  PRXSTRING,
                                  PSZ,
                                  PRXSTRING);

(***    RexxRegisterFunctionDll - Register a function in the AFT *)

function RexxRegisterFunctionDll(PCSZ ,                           (* Name of function to add    *)
        PCSZ ,                           (* Dll file name (if in dll)  *)
        PCSZ );                          (* Entry in dll               *)

(***   Uppercase Entry Point Name *)
const REXXREGISTERFUNCTIONDLL  RexxRegisterFunctionDll


(***    RexxRegisterFunctionExe - Register a function in the AFT *)

function RexxRegisterFunctionExe(PCSZ ,                           (* Name of function to add    *)
        PFN);                          (* Entry point in EXE         *)

(***   Uppercase Entry Point Name *)
const REXXREGISTERFUNCTIONEXE  RexxRegisterFunctionExe



(***    RexxDeregisterFunction - Delete a function from the AFT *)

function RexxDeregisterFunction(PCSZ  );                         (* Name of function to remove *)

(***   Uppercase Entry Point Name *)
const REXXDEREGISTERFUNCTION  RexxDeregisterFunction



(***    RexxQueryFunction - Scan the AFT for a function *)

function RexxQueryFunction(PCSZ  );                         (* Name of function to find   *)

(***   Uppercase Entry Point Name *)
const REXXQUERYFUNCTION  RexxQueryFunction



(* XLATON *)


#endif (* INCL_RXFUNC *)


(***   System Exits *)
#ifdef INCL_RXSYSEXIT

(***    Subfunction RXFNCCAL - External Function Calls *)

type _Packed struct _RXFNC_FLAGS {          (* fl *)
   unsigned rxfferr  : 1;              (* Invalid call to routine.   *)
   unsigned rxffnfnd : 1;              (* Function not found.        *)
   unsigned rxffsub  : 1;              (* Called as a subroutine     *)
}  RXFNC_FLAGS ;

type _Packed struct _RXFNCCAL_PARM {        (* fnc *)
   RXFNC_FLAGS       rxfnc_flags ;     (* function flags             *)
   PUCHAR            rxfnc_name;       (* Pointer to function name.  *)
   USHORT            rxfnc_namel;      (* Length of function name.   *)
   PUCHAR            rxfnc_que;        (* Current queue name.        *)
   USHORT            rxfnc_quel;       (* Length of queue name.      *)
   USHORT            rxfnc_argc;       (* Number of args in list.    *)
   PRXSTRING         rxfnc_argv;       (* Pointer to argument list.  *)
   RXSTRING          rxfnc_retc;       (* Return value.              *)
}  RXFNCCAL_PARM;


(***    Subfunction RXCMDHST -- Process Host Commands     *)

type _Packed struct _RXCMD_FLAGS {          (* fl *)
   unsigned rxfcfail : 1;              (* Command failed.            *)
   unsigned rxfcerr  : 1;              (* Command ERROR occurred.    *)
}  RXCMD_FLAGS;

type struct _RXCMDHST_PARM {        (* rx *)
   RXCMD_FLAGS       rxcmd_flags;      (* error/failure flags        *)
   PUCHAR            rxcmd_address;    (* Pointer to address name.   *)
   USHORT            rxcmd_addressl;   (* Length of address name.    *)
   PUCHAR            rxcmd_dll;        (* dll name for command.      *)
   USHORT            rxcmd_dll_len;    (* Length of dll name.        *)
   RXSTRING          rxcmd_command;    (* The command string.        *)
   RXSTRING          rxcmd_retc;       (* Pointer to return buffer   *)
}  RXCMDHST_PARM;


(***     Subfunction RXMSQPLL -- Pull Entry from Queue *)

type struct _RXMSQPLL_PARM {        (* pll *)
   RXSTRING          rxmsq_retc;       (* Pointer to dequeued entry  *)
                                       (* buffer.  User allocated.   *)
} RXMSQPLL_PARM;


(***    Subfunction RXMSQPSH -- Push Entry on Queue *)

type _Packed struct _RXMSQ_FLAGS {          (* fl *)
   unsigned rxfmlifo : 1;              (* Stack entry LIFO if set    *)
}  RXMSQ_FLAGS;

type _Packed struct _RXMSQPSH_PARM {        (* psh *)
   RXMSQ_FLAGS       rxmsq_flags;      (* LIFO/FIFO flag             *)
   RXSTRING          rxmsq_value;      (* The entry to be pushed.    *)
}  RXMSQPSH_PARM;


(***    Subfunction RXMSQSIZ -- Return the Current Queue Size *)

type struct _RXMSQSIZ_PARM {        (* siz *)
   ULONG             rxmsq_size;       (* Number of Lines in Queue   *)
}  RXMSQSIZ_PARM;


(***    Subfunction RXMSQNAM -- Set Current Queue Name *)

type struct _RXMSQNAM_PARM {        (* nam *)
   RXSTRING          rxmsq_name;       (* RXSTRING containing        *)
                                       (* queue name.                *)
}  RXMSQNAM_PARM;


(***    Subfunction RXSIOSAY -- Perform SAY Clause *)

type struct _RXSIOSAY_PARM {        (* say *)
   RXSTRING          rxsio_string;     (* String to display.         *)
}  RXSIOSAY_PARM;


(***    Subfunction RXSIOTRC -- Write Trace Output *)

type struct _RXSIOTRC_PARM { (* trcparm *)
   RXSTRING          rxsio_string;     (* Trace line to display.     *)
}  RXSIOTRC_PARM;


(***    Subfunction RXSIOTRD -- Read Input from the Terminal *)

type struct _RXSIOTRD_PARM {        (* trd *)
   RXSTRING          rxsiotrd_retc;    (* RXSTRING for output.       *)
}  RXSIOTRD_PARM;


(***    Subfunction RXSIODTR -- Read Debug Input from the Terminal *)

type struct _RXSIODTR_PARM {        (* dtr *)
   RXSTRING          rxsiodtr_retc;    (* RXSTRING for output.       *)
}  RXSIODTR_PARM;


(***    Subfunction RXHSTTST -- Test for HALT Condition *)

type struct _RXHLT_FLAGS {          (* fl Halt flag               *)
   unsigned rxfhhalt : 1;              (* Set if HALT occurred.      *)
}  RXHLT_FLAGS;

type struct _RXHLTTST_PARM {        (* tst *)
   RXHLT_FLAGS rxhlt_flags;            (* Set if HALT occurred       *)
}  RXHLTTST_PARM;


(***    Subfunction RXTRCTST -- Test for TRACE Condition *)

type struct _RXTRC_FLAGS {          (* fl Trace flags             *)
   unsigned rxftrace : 1;              (* Set to run external trace. *)
}  RXTRC_FLAGS;

type struct _RXTRCTST_PARM {        (* tst *)
   RXTRC_FLAGS rxtrc_flags;            (* Set to run external trace  *)
}  RXTRCTST_PARM;


(* XLATOFF *)

(* This type simplifies coding of an Exit handler.                *)
type LONG APIENTRY RexxExitHandler(LONG,
                             LONG,
                             PEXIT);

(***      RexxRegisterExitDll - Register a system exit. *)

function RexxRegisterExitDll(PCSZ ,                          (* Name of the exit handler   *)
         PCSZ ,                          (* Name of the DLL            *)
         PCSZ ,                          (* Name of the procedure      *)
         PUCHAR,                       (* User area                  *)
         ULONG );                      (* Drop authority             *)

(***   Uppercase Entry Point Name *)
const REXXREGISTEREXITDLL  RexxRegisterExitDll


(***      RexxRegisterExitExe - Register a system exit. *)

function RexxRegisterExitExe(PCSZ ,                          (* Name of the exit handler   *)
         PFN,                          (* Address of exit handler    *)
         PUCHAR);                      (* User area                  *)

(***   Uppercase Entry Point Name *)
const REXXREGISTEREXITEXE  RexxRegisterExitExe



(***    RexxDeregisterExit - Drop registration of a system exit. *)

function RexxDeregisterExit(PCSZ ,                          (* Exit name                  *)
         PCSZ  ) ;                       (* DLL module name            *)

(***   Uppercase Entry Point Name *)
const REXXDEREGISTEREXIT  RexxDeregisterExit



(***    RexxQueryExit - Query an exit for existance. *)

function RexxQueryExit(PCSZ ,                          (* Exit name                  *)
         PCSZ ,                          (* DLL Module name.           *)
         PUSHORT,                      (* Existance flag.            *)
         PUCHAR );                     (* User data.                 *)

(***   Uppercase Entry Point Name *)
const REXXQUERYEXIT  RexxQueryExit
(* XLATON *)


#endif (* INCL_RXSYSEXIT *)


(***    Asynchronous Request Interface *)
#ifdef INCL_RXARI

(* XLATOFF *)

(***    RexxSetHalt - Request Program Halt *)

function RexxSetHalt(PID,                         (* Process Id                  *)
         TID);                        (* Thread Id                   *)

(***   Uppercase Entry Point Name *)
const REXXSETHALT  RexxSetHalt


(***    RexxSetTrace - Request Program Trace *)

function RexxSetTrace(PID,                         (* Process Id                  *)
         TID);                        (* Thread Id                   *)

(***   Uppercase Entry Point Name *)
const REXXSETTRACE  RexxSetTrace


(***    RexxResetTrace - Turn Off Program Trace *)

function RexxResetTrace(PID,                         (* Process Id                  *)
         TID);                        (* Thread Id                   *)

(***   Uppercase Entry Point Name *)
const REXXRESETTRACE  RexxResetTrace

(* XLATON *)


#endif (* INCL_RXARI *)


(***    Macro Space Interface *)
#ifdef INCL_RXMACRO

(* XLATOFF *)

(***    RexxAddMacro - Register a function in the Macro Space        *)

function RexxAddMacro(PCSZ ,                         (* Function to add or change   *)
         PCSZ ,                         (* Name of file to get function*)
         ULONG  );                    (* Flag indicating search pos  *)

(***   Uppercase Entry Point Name *)
const REXXADDMACRO  RexxAddMacro



(***    RexxDropMacro - Remove a function from the Macro Space       *)

function RexxDropMacro(PCSZ  );                        (* Name of function to remove *)

(***   Uppercase Entry Point Name *)
const REXXDROPMACRO  RexxDropMacro



(***    RexxSaveMacroSpace - Save Macro Space functions to a file    *)

function RexxSaveMacroSpace(ULONG ,                      (* Argument count (0==save all) *)
         PCSZ  *,                       (* List of funct names to save *)
         PCSZ );                        (* File to save functions in   *)

(***   Uppercase Entry Point Name *)
const REXXSAVEMACROSPACE  RexxSaveMacroSpace



(***    RexxLoadMacroSpace - Load Macro Space functions from a file  *)

function RexxLoadMacroSpace(ULONG ,                      (* Argument count (0==load all) *)
         PCSZ  *,                       (* List of funct names to load *)
         PCSZ );                        (* File to load functions from *)

(***   Uppercase Entry Point Name *)
const REXXLOADMACROSPACE  RexxLoadMacroSpace



(***    RexxQueryMacro - Find a function's search-order position     *)

function RexxQueryMacro(PCSZ ,                         (* Function to search for      *)
         PUSHORT );                   (* Ptr for position flag return *)

(***   Uppercase Entry Point Name *)
const REXXQUERYMACRO  RexxQueryMacro



(***    RexxReorderMacro - Change a function's search-order          *)
(***                            position                             *)

function RexxReorderMacro(PCSZ ,                         (* Name of funct change order  *)
         ULONG  );                    (* New position for function   *)

(***   Uppercase Entry Point Name *)
const REXXREORDERMACRO  RexxReorderMacro



(***    RexxClearMacroSpace - Remove all functions from a MacroSpace *)


function RexxClearMacroSpace(VOID );                      (* No Arguments.               *)

(***   Uppercase Entry Point Name *)
const REXXCLEARMACROSPACE  RexxClearMacroSpace

(* XLATON *)

#endif (* INCL_RXMACRO *)

end.
