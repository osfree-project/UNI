module kbd;



type HKBD=USHORT;
type PHKBD=^HKBD;

function KbdRegister(pszModName: PSZ;
                                    pszEntryPt: PSZ;
                                    FunMask: ULONG): USHORT;

const KR_KBDCHARIN               = $00000001;
const KR_KBDPEEK                 = $00000002;
const KR_KBDFLUSHBUFFER          = $00000004;
const KR_KBDGETSTATUS            = $00000008;
const KR_KBDSETSTATUS            = $00000010;
const KR_KBDSTRINGIN             = $00000020;
const KR_KBDOPEN                 = $00000040;
const KR_KBDCLOSE                = $00000080;
const KR_KBDGETFOCUS             = $00000100;
const KR_KBDFREEFOCUS            = $00000200;
const KR_KBDGETCP                = $00000400;
const KR_KBDSETCP                = $00000800;
const KR_KBDXLATE                = $00001000;
const KR_KBDSETCUSTXT            = $00002000;

const IO_WAIT                   = 0;
const IO_NOWAIT                 = 1;

function KbdDeRegister(): USHORT;

   (* KBDKEYINFO structure, for KbdCharIn and KbdPeek *)


type  KBDKEYINFO=structure     (* kbci *)
          chChar: UCHAR;
          chScan: UCHAR;
          fbStatus: UCHAR;
          bNlsShift: UCHAR;
          fsState: USHORT;
          time: ULONG;
   end;

type PKBDKEYINFO=^KBDKEYINFO;


function KbdCharIn(pkbci: PKBDKEYINFO;
                                  fWait: USHORT;
                                  hkbd: HKBD): USHORT;

function KbdPeek (pkbci: PKBDKEYINFO;
                                 hkbd: HKBD): USHORT;

   (* structure for KbdStringIn() *)

type STRINGINBUF=structure     (* kbsi *)
      cb: USHORT;
      cchIn: USHORT;
   end;
type PSTRINGINBUF=^STRINGINBUF;

function KbdStringIn(pch: PCH;
                                     pchIn: PSTRINGINBUF;
                                     fsWait: USHORT;
                                     hkbd: HKBD): USHORT;

function KbdFlushBuffer (hkbd: HKBD): USHORT;

   (* KBDINFO.fsMask *)

const KEYBOARD_ECHO_ON                = $0001;
const KEYBOARD_ECHO_OFF               = $0002;
const KEYBOARD_BINARY_MODE            = $0004;
const KEYBOARD_ASCII_MODE             = $0008;
const KEYBOARD_MODIFY_STATE           = $0010;
const KEYBOARD_MODIFY_INTERIM         = $0020;
const KEYBOARD_MODIFY_TURNAROUND      = $0040;
const KEYBOARD_2B_TURNAROUND          = $0080;
const KEYBOARD_SHIFT_REPORT           = $0100;

(*   #ifndef INCL_DOSDEVIOCTL *) (* following constants defined in bsedev.h *)

      (* KBDINFO.fsState/KBDKEYINFO.fsState/KBDTRANS.fsState *)
   const KBDSTF_RIGHTSHIFT               = $0001;
   const KBDSTF_LEFTSHIFT                = $0002;
   const KBDSTF_CONTROL                  = $0004;
   const KBDSTF_ALT                      = $0008;
   const KBDSTF_SCROLLLOCK_ON            = $0010;
   const KBDSTF_NUMLOCK_ON               = $0020;
   const KBDSTF_CAPSLOCK_ON              = $0040;
   const KBDSTF_INSERT_ON                = $0080;
   const KBDSTF_LEFTCONTROL              = $0100;
   const KBDSTF_LEFTALT                  = $0200;
   const KBDSTF_RIGHTCONTROL             = $0400;
   const KBDSTF_RIGHTALT                 = $0800;
   const KBDSTF_SCROLLLOCK               = $1000;
   const KBDSTF_NUMLOCK                  = $2000;
   const KBDSTF_CAPSLOCK                 = $4000;
   const KBDSTF_SYSREQ                   = $8000;
(*   #endif *) (* INCL_DOSDEVIOCTL *)

   (* KBDINFO structure, for KbdSet/GetStatus *)
type KBDINFO=structure         (* kbst *)
      cb: USHORT;
      fsMask: USHORT;
      chTurnAround: USHORT;
      fsInterim: USHORT;
      fsState: USHORT;
  end;
type PKBDINFO=^KBDINFO;


function KbdSetStatus (pkbdinfo: PKBDINFO;
                                      hkbd: HKBD): USHORT;

function KbdGetStatus (pkbdinfo: PKBDINFO;
                                      hdbd: HKBD): USHORT;

function KbdSetCp ( usReserved: USHORT;
                                   pidCP: USHORT;
                                   hdbd: HKBD): USHORT;

function KbdGetCp (ulReserved: ULONG;
                                   pidCP: PUSHORT;
                                   hkbd: HKBD): USHORT;

function KbdOpen (phkbd: PHKBD): USHORT;

function KbdClose ( hkbd: HKBD): USHORT;

function KbdGetFocus ( fWait: USHORT;
                                      hkbd: HKBD): USHORT;

function KbdFreeFocus ( hkbd: HKBD): USHORT;

function KbdSynch ( fsWait: USHORT): USHORT;

function KbdSetFgnd(): USHORT;

   (* structure for KbdGetHWID() *)
type KBDHWID=structure         (* kbhw *)
       cb: USHORT;
       idKbd: USHORT;
       usReserved1: USHORT;
       usReserved2: USHORT;
   end;
type PKBDHWID=^KBDHWID;

function KbdGetHWID (pkbdhwid: PKBDHWID;
                                    hkbd: HKBD): USHORT;

function KbdSetHWID (pkbdhwid: PKBDHWID;
                                     hkbd: HKBD): USHORT;


   (* KBDTRANS.fbStatus *)

const KBDTRF_SHIFT_KEY_IN             = $01;
const KBDTRF_CONVERSION_REQUEST       = $20;
const KBDTRF_FINAL_CHAR_IN            = $40;
const KBDTRF_INTERIM_CHAR_IN          = $80;

   (* structure for KbdXlate() *)

type  KBDTRANS=structure        (* kbxl *)
            chChar: UCHAR;
            chScan: UCHAR;
            fbStatus: UCHAR;
            bNlsShift: UCHAR;
            fsState: USHORT;
            time: ULONG;
            fsDD: USHORT;
            fsXlate: USHORT;
            fsShift: USHORT;
            sZero: USHORT;
   end;
type PKBDTRANS=^KBDTRANS;


function KbdXlate (pkbdtrans: PKBDTRANS;
                                   hkbd: HKBD): USHORT;

function KbdSetCustXt (usCodePage: PUSHORT;
                                       hkbd: HKBD): USHORT;



end.
