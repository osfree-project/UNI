module winmessagemgrcommon;

   (* QMSG structure *)
   type QMSG=structure    (* qmsg *)
      hwnd: HWND;
      msg: ULONG;
      mp1: MPARAM;
      mp2: MPARAM;
      time: ULONG;
      ptl: POINTL;
      reserved: ULONG;
   end;
   type PQMSG=^QMSG;

   (*** Standard Window Messages *******************************************)
   const WM_NULL                    = $0000;
   const WM_CREATE                  = $0001;
   const WM_DESTROY                 = $0002;

   const WM_ENABLE                  = $0004;
   const WM_SHOW                    = $0005;
   const WM_MOVE                    = $0006;
   const WM_SIZE                    = $0007;
   const WM_ADJUSTWINDOWPOS         = $0008;

   const WM_CALCVALIDRECTS          = $0009;

   const WM_SETWINDOWPARAMS         = $000a;
   const WM_QUERYWINDOWPARAMS       = $000b;
   const WM_HITTEST                 = $000c;
   const WM_ACTIVATE                = $000d;
   const WM_SETFOCUS                = $000f;
   const WM_SETSELECTION            = $0010;

   (* language support Winproc *)
   const WM_PPAINT                  = $0011;
   const WM_PSETFOCUS               = $0012;
   const WM_PSYSCOLORCHANGE         = $0013;
   const WM_PSIZE                   = $0014;
   const WM_PACTIVATE               = $0015;
   const WM_PCONTROL                = $0016;

   const WM_COMMAND                 = $0020;
   const WM_SYSCOMMAND              = $0021;
   const WM_HELP                    = $0022;
   const WM_PAINT                   = $0023;

      const WM_TIMER                = $0024;
      const WM_SEM1                 = $0025;
      const WM_SEM2                 = $0026;
      const WM_SEM3                 = $0027;
      const WM_SEM4                 = $0028;

   const WM_CLOSE                   = $0029;
   const WM_QUIT                    = $002a;
   const WM_SYSCOLORCHANGE          = $002b;
   const WM_SYSVALUECHANGED         = $002d;
   const WM_APPTERMINATENOTIFY      = $002e;
   const WM_PRESPARAMCHANGED        = $002f;

   (* Control notification messages *)
   const WM_CONTROL                 = $0030;
   const WM_VSCROLL                 = $0031;
   const WM_HSCROLL                 = $0032;
   const WM_INITMENU                = $0033;
   const WM_MENUSELECT              = $0034;
   const WM_MENUEND                 = $0035;
   const WM_DRAWITEM                = $0036;
   const WM_MEASUREITEM             = $0037;
   const WM_CONTROLPOINTER          = $0038;
   const WM_QUERYDLGCODE            = $003a;
   const WM_INITDLG                 = $003b;
   const WM_SUBSTITUTESTRING        = $003c;
   const WM_MATCHMNEMONIC           = $003d;
   const WM_SAVEAPPLICATION         = $003e;

   const WM_SEMANTICEVENT           = $0490;


   (*************************************************************************
   * Reserve a range of messages for help manager.  This range includes
   * public messages, defined below, and private ones, which need to be
   * reserved here to prevent clashing with application messages
   *************************************************************************)

   const WM_HELPBASE                = $0F00; (* Start of msgs for help manager   *)
   const WM_HELPTOP                 = $0FFF; (* End of msgs for help manager     *)

   const WM_USER                    = $1000;

   (*** WM_COMMAND msg source codes ****************************************)
   const CMDSRC_PUSHBUTTON     = 1;
   const CMDSRC_MENU           = 2;
   const CMDSRC_ACCELERATOR    = 3;
   const CMDSRC_FONTDLG        = 4;
   const CMDSRC_FILEDLG        = 5;
   const CMDSRC_PRINTDLG       = 6;
   const CMDSRC_COLORDLG       = 7;
   const CMDSRC_OTHER          = 0;

   (*
   * The following structure and macro are used to access the
   * WM_COMMAND, WM_HELP, and WM_SYSCOMMAND message parameters:
   *)
   type COMMANDMSG=structure    (* commandmsg *)
        cmd: USHORT;              (* mp1 *)
        unused: USHORT;
        source: USHORT;           (* mp2 *)
        fMouse: USHORT;
   end;
   type CMDMSG=COMMANDMSG;
   type PCMDMSG=^CMDMSG;

(*
   #define COMMANDMSG(pmsg) \
   ((PCMDMSG)((PBYTE)pmsg + sizeof(MPARAM) ))
*)

   (*** The following structure is used by the WinQueryQueueInfo() routine *)
   type MQINFO=structure    (* mqi *)
         cb: ULONG;
         pid: PID;
         tid: TID;
         cmsgs: ULONG;
         pReserved: PVOID;
   end;
   type PMQINFO=^MQINFO;

   function WinSendMsg(in hwnd: HWND;
                               in msg: ULONG;
                               in mp1: MPARAM;
                               in mp2: MPARAM): MRESULT;

        function WinCreateMsgQueue(in hab: HAB;
                                       in cmsg: LONG): HMQ;

       function WinDestroyMsgQueue(in hmq: HMQ): BOOL;

       function WinQueryQueueInfo(in hmq: HMQ;
                                      out pmqi: MQINFO;
                                      in cbCopy: ULONG): BOOL;

          function WinCancelShutdown(in hmq: HMQ;
                                         in fCancelAlways: BOOL): BOOL;

       function WinGetMsg(in hab: HAB;
                              out pqmsg: QMSG;
                              in hwndFilter: HWND;
                              in msgFilterFirst: ULONG;
                              in msgFilterLast: ULONG): BOOL;

       function WinPeekMsg(in hab: HAB;
                               out pqmsg: QMSG;
                               in hwndFilter: HWND;
                               in msgFilterFirst: ULONG;
                               in msgFilterLast: ULONG;
                               in fl: ULONG): BOOL;

    function WinDispatchMsg(in hab: HAB;
                                    out pqmsg: QMSG): MRESULT;

       function WinPostMsg(in hwnd: HWND;
                               in msg: ULONG;
                               in mp1: MPARAM;
                               in mp2: MPARAM): BOOL;

       function WinRegisterUserMsg(in hab: HAB;
                                       in msgid: ULONG;
                                       in datatype1: LONG;
                                       in dir1: LONG;
                                       in datatype2: LONG;
                                       in dir2: LONG;
                                       in datatyper: LONG): BOOL;

       function WinRegisterUserDatatype(in hab: HAB;
                                            in datatype: LONG;
                                            in count: LONG;
                                            in types: PLONG): BOOL;

       function WinSetMsgMode(in hab: HAB;
                                    in classname: PCSZ;
                                   in control: LONG): BOOL;

       function WinSetSynchroMode(in hab: HAB;
                                       in mode: LONG): BOOL;

   (*** WinPeekMsg() constants *********************************************)
   const PM_REMOVE                  = $0001;
   const PM_NOREMOVE                = $0000;

   (*** WinRegisterUserDatatype datatypes defined in separate file *********)
uses pmtypes;

   (*** WinRegisterUserMsg direction codes *********************************)
   const RUM_IN                     = 1;
   const RUM_OUT                    = 2;
   const RUM_INOUT                  = 3;

   (*** WinSetMsgMode constants *******************************************)
   const SMD_DELAYED                = $0001;
   const SMD_IMMEDIATE              = $0002;

   (*** WinSetSynchroMode constants ***************************************)
   const SSM_SYNCHRONOUS            = $0001;
   const SSM_ASYNCHRONOUS           = $0002;
   const SSM_MIXED                  = $0003;

end.
