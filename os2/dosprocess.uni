module dosprocess;

(* NOINC *
   #define DosCwait           DosWaitChild
   #define DosSetPrty         DosSetPriority
* INC *)

(* uses bsetib; *)

(*
 *      Thread Information Block (TIB)
 *)

type tib2_s=structure
       tib2_ultid: ULONG;             (* Thread I.D. *)
       tib2_ulpri: ULONG;             (* Thread priority *)
       tib2_version: ULONG;           (* Version number for this structure *)
       tib2_usMCCount: USHORT;         (* Must Complete count *)
       tib2_fMCForceFlag: USHORT;      (* Must Complete force flag *)
  end;

type TIB2=tib2_s;
type PTIB2=^TIB2;

type tib_s=structure                           (* TIB Thread Information Block *)
        tib_pexchain: PVOID;           (* Head of exception handler chain *)
        tib_pstack: PVOID;             (* Pointer to base of stack *)
        tib_pstacklimit: PVOID;        (* Pointer to end of stack *)
        tib_ptib2: PTIB2;              (* Pointer to system specific TIB *)
        tib_version: ULONG;            (* Version number for this TIB structure *)
        tib_ordinal: ULONG;            (* Thread ordinal number        *)
  end;

type tib_t=tib_s;
type TIB=tib_s;
type PTIB=^TIB;


(*
 *      Process Information Block (PIB)
 *)

type pib_s=structure                     (* PIB Process Information Block *)
          pib_ulpid: ULONG;              (* Process I.D. *)
          pib_ulppid: ULONG;             (* Parent process I.D. *)
          pib_hmte: ULONG;               (* Program (.EXE) module handle *)
          pib_pchcmd: PCHAR;             (* Command line pointer *)
          pib_pchenv: PCHAR;             (* Environment pointer *)
          pib_flstatus: ULONG;           (* Process' status bits *)
          pib_ultype: ULONG;             (* Process' type code *)
       end;


type pib_t=pib_s;
type PIB=pib_s;
type PPIB=^PIB;


type FNTHREAD=procedure(ul: ULONG);
type PFNTHREAD=^FNTHREAD;


function DosCreateThread(out ptid: TID;
                         in  pfn: PFNTHREAD;
                         in  param: ULONG;
                         in  flag: ULONG;
                         in  cbStack: ULONG): APIRET;

type THREADCREATE=structure
      cbSize: ULONG;
      pTid: PTID;
      pfnStart: PFNTHREAD;
      lParam: ULONG;
      lFlag: ULONG;
      pStack: PBYTE;
      cbStack: ULONG;
   end;

type PTHREADCREATE=^THREADCREATE;

function DosCreateThread2(in ptc: PTHREADCREATE): APIRET;

function DosResumeThread(in tid: TID): APIRET;

function DosSuspendThread(in tid: TID): APIRET;

function DosGetInfoBlocks(out pptib: PTIB;
                          out pppib: PPIB): APIRET;

(* Process Type codes (Process Information Block (PIB) pib_ultype field)      *)

const PT_FULLSCREEN              =0; (* Full screen application               *)
const PT_REALMODE                =1; (* Real mode process                     *)
const PT_WINDOWABLEVIO           =2; (* VIO windowable application            *)
const PT_PM                      =3; (* Presentation Manager application      *)
const PT_DETACHED                =4; (* Detached application                  *)

(* Process Status Flags (Process Information Block (PIB) pib_flstatus field)  *)

const PS_EXITLIST                =1; (* Thread is in exitlist routine         *)

function DosKillThread(in tid: TID): APIRET;

function DosAllocThreadLocalMemory(in cb: ULONG; out p: PULONG): APIRET;

function DosFreeThreadLocalMemory(in p: PULONG): APIRET;

   (* Action code values *)

const DCWA_PROCESS       = 0;
const DCWA_PROCESSTREE   = 1;

   (* Wait option values *)

const DCWW_WAIT         = 0;
const DCWW_NOWAIT       = 1;

(* Thread Flags for DosCreateThread options *)

const CREATE_READY        = 0;
const CREATE_SUSPENDED    = 1;
const STACK_SPARSE        = 0;
const STACK_COMMITTED     = 2;

type RESULTCODES=structure       (* resc *)
      codeTerminate: ULONG;
      codeResult: ULONG;
  end;

type PRESULTCODES=^RESULTCODES;

function DosWaitChild(in  action: ULONG;
                      in  option: ULONG;
                      out pres: RESULTCODES;
                      out ppid: PID;
                      in  pid: PID): APIRET;

function DosWaitThread(in ptid: PTID;
                       in option: ULONG): APIRET;

function DosSleep(in msec: ULONG): APIRET;

type MPAFFINITY=structure (* afnty *)
      mask: array[2] of ULONG; (* CPUs 0 thru 31 in [0], CPUs 32 thru 63 in [1] *)
  end;
type PMPAFFINITY=^MPAFFINITY;

function DosQueryThreadAffinity(in scope: ULONG;
                                in pAffinity: PMPAFFINITY): APIRET;

   (* scope values for QueryThreadAffinity *)

const AFNTY_THREAD      = 0;
const AFNTY_SYSTEM      = 1;

function DosSetThreadAffinity(in pAffinity: PMPAFFINITY): APIRET;

uses dosdebug;

function DosDebug(in pdbgbuf: PVOID): APIRET;


   (* codeTerminate values (also passed to ExitList routines) *)

   const TC_EXIT           = 0;
   const TC_HARDERROR      = 1;
   const TC_TRAP           = 2;
   const TC_KILLPROCESS    = 3;
   const TC_EXCEPTION      = 4;

type FNEXITLIST=procedure(ul: ULONG);
type PFNEXITLIST=^FNEXITLIST;

function DosEnterCritSec(): APIRET;

function DosExitCritSec(): APIRET;

function DosExitList(in ordercode: ULONG;
                     in pfn: PFNEXITLIST): APIRET;

   (* DosExitList functions *)

   const EXLST_ADD         = 1;
   const EXLST_REMOVE      = 2;
   const EXLST_EXIT        = 3;

function DosExecPgm(out pObjname: CHAR;
                    in  cbObjname: LONG;
                    in  execFlag: ULONG,
                    in  pArg: PSZ;
                    in  pEnv: PSZ;
                    out pRes: RESULTCODES;
                    in pName: PSZ): APIRET;

   (* DosExecPgm functions *)

   const EXEC_SYNC          = 0;
   const EXEC_ASYNC         = 1;
   const EXEC_ASYNCRESULT   = 2;
   const EXEC_TRACE         = 3;
   const EXEC_BACKGROUND    = 4;
   const EXEC_LOAD          = 5;
   const EXEC_ASYNCRESULTDB = 6;


function DosSetPriority(in scope: ULONG;
                        in ulClass: ULONG;
                        in delta: LONG;
                        in PorTid: ULONG): APIRET;

   (* Priority scopes *)

   const PRTYS_PROCESS     = 0;
   const PRTYS_PROCESSTREE = 1;
   const PRTYS_THREAD      = 2;

   (* Priority classes *)

   const PRTYC_NOCHANGE         = 0;
   const PRTYC_IDLETIME         = 1;
   const PRTYC_REGULAR          = 2;
   const PRTYC_TIMECRITICAL     = 3;
   const PRTYC_FOREGROUNDSERVER = 4;

   (* Priority deltas *)

   const PRTYD_MINIMUM   =  -31;
   const PRTYD_MAXIMUM   =   31;

function DosKillProcess(in action: ULONG;
                        in pid: PID): APIRET;

   const DKP_PROCESSTREE  =  0;
   const DKP_PROCESS      =  1;

end.
