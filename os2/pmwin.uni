module pmwin;


const HWND_DESKTOP            = 1;
const HWND_OBJECT             = 2;

const HWND_TOP                = 3;
const HWND_BOTTOM             = 4;

const HWND_THREADCAPTURE      = 5;

(*** Standard Window Classes ***********************************************)

const WC_FRAME             = $ffff0001;
const WC_COMBOBOX          = $ffff0002;
const WC_BUTTON            = $ffff0003;
const WC_MENU              = $ffff0004;
const WC_STATIC            = $ffff0005;
const WC_ENTRYFIELD        = $ffff0006;
const WC_LISTBOX           = $ffff0007;
const WC_SCROLLBAR         = $ffff0008;
const WC_TITLEBAR          = $ffff0009;
const WC_MLE               = $ffff000A;
(* 000B to 000F reserved *)
const WC_APPSTAT           = $ffff0010;
const WC_KBDSTAT           = $ffff0011;
const WC_PECIC             = $ffff0012;
const WC_DBE_KKPOPUP       = $ffff0013;
(* 0014 to 001F reserved *)
const WC_SPINBUTTON        = $ffff0020;
(* 0021 to 0024 reserved *)
const WC_CONTAINER         = $ffff0025;
const WC_SLIDER            = $ffff0026;
const WC_VALUESET          = $ffff0027;
const WC_NOTEBOOK          = $ffff0028;
(* 0029 to 002C used by PEN *)
const WC_PENFIRST          = $ffff0029;
const WC_PENLAST           = $ffff002C;
(* 002D to 0030 reserved *)
(* 0030 to 003F reserved *)
const WC_MMPMFIRST         = $ffff0040;
const WC_CIRCULARSLIDER    = $ffff0041;
const WC_MMPMLAST          = $ffff004f;
(* 0050 to 005f reserved *)
const WC_PRISTDDLGFIRST    = $ffff0050;
const WC_PRISTDDLGLAST     = $ffff0057;
const WC_PUBSTDDLGFIRST    = $ffff0058;
const WC_PUBSTDDLGLAST     = $ffff005f;
(* 0060 to 006f reserved *)

(*** Standard Window Styles ************************************************)

const WS_VISIBLE                 = $80000000;
const WS_DISABLED                = $40000000;
const WS_CLIPCHILDREN            = $20000000;
const WS_CLIPSIBLINGS            = $10000000;
const WS_PARENTCLIP              = $08000000;
const WS_SAVEBITS                = $04000000;
const WS_SYNCPAINT               = $02000000;
const WS_MINIMIZED               = $01000000;
const WS_MAXIMIZED               = $00800000;
const WS_ANIMATE                 = $00400000;

(*** Dialog manager styles *************************************************)

const WS_GROUP                   = $00010000;
const WS_TABSTOP                 = $00020000;
const WS_MULTISELECT             = $00040000;

(*** Class styles *********************************************************)

const CS_MOVENOTIFY              = $00000001;
const CS_SIZEREDRAW              = $00000004;
const CS_HITTEST                 = $00000008;
const CS_PUBLIC                  = $00000010;
const CS_FRAME                   = $00000020;
const CS_CLIPCHILDREN            = $20000000;
const CS_CLIPSIBLINGS            = $10000000;
const CS_PARENTCLIP              = $08000000;
const CS_SAVEBITS                = $04000000;
const CS_SYNCPAINT               = $02000000;

uses pmshl;

function WinCreateWindow(in hwndParent: HWND;
                                   in pszClass: PCSZ;
                                   in pszName: PCSZ;
                                   in flStyle: ULONG;
                                   in x: LONG;
                                   in y: LONG;
                                   in cx: LONG;
                                   in cy: LONG;
                                   in hwndOwner: HWND;
                                   in hwndInsertBehind: HWND;
                                   in id: ULONG;
                                   in pCtlData: PVOID;
                                   in pPresParams: PVOID): HWND;

function WinEnableWindow(in hwnd: HWND;
                                 in fEnable: BOOL): BOOL;

function WinIsWindowEnabled(in hwnd: HWND): BOOL;

function WinEnableWindowUpdate(in hwnd: HWND;
                                        in fEnable: BOOL): BOOL;

function WinIsWindowVisible(in hwnd: HWND): BOOL;

function WinQueryWindowText(in hwnd: HWND;
                                     in cchBufferMax: LONG;
                                     out pchBuffer: CHAR): LONG;

function WinSetWindowText(in hwnd: HWND;
                                  in pszText: PCSZ): BOOL;

function WinQueryWindowTextLength(in hwnd: HWND): LONG;

function WinWindowFromID(in hwndParent: HWND;
                                 in id: ULONG): HWND;

function WinIsWindow(in hab: HAB;
                             in hwnd: HWND): BOOL;

function WinQueryWindow(in hwnd: HWND;
                                in cmd: LONG): HWND;

function WinMultWindowFromIDs(in hwndParent: HWND;
                                       out prghwnd: HWND;
                                       in idFirst: ULONG;
                                       in idLast: ULONG): LONG;

(*** WinQueryWindow() codes ************************************************)

const QW_NEXT        = 0;
const QW_PREV        = 1;
const QW_TOP         = 2;
const QW_BOTTOM      = 3;
const QW_OWNER       = 4;
const QW_PARENT      = 5;
const QW_NEXTTOP     = 6;
const QW_PREVTOP     = 7;
const QW_FRAMEOWNER  = 8;

function WinSetParent(in hwnd: HWND;
                             in hwndNewParent: HWND;
                             in fRedraw: BOOL): BOOL;

function WinIsChild(in hwnd: HWND;
                           in hwndParent: HWND): BOOL;

function WinSetOwner(in hwnd: HWND;
                            in hwndNewOwner: HWND): BOOL;

function WinQueryWindowProcess(in hwnd: HWND;
                                      out ppid: PID;
                                      out ptid: TID): BOOL;

function WinQueryObjectWindow(in hwndDesktop: HWND): HWND;

function WinQueryDesktopWindow(in hab: HAB;
                                      in hdc: HDC): HWND;

(*** Window positioning functions *)

(* WinSetMultWindowPos() structure *)

type SWP=structure
      fl: ULONG;
      cy: LONG;
      cx: LONG;
      y: LONG;
      x: LONG;
      hwndInsertBehind: HWND;
      hwnd: HWND;
      ulReserved1: ULONG;
      ulReserved2: ULONG;
  end;
type PSWP=^SWP;

function WinSetWindowPos(in hwnd: HWND;
                                 in hwndInsertBehind: HWND;
                                 in x: LONG;
                                 in y: LONG;
                                 in cx: LONG;
                                 in cy: LONG;
                                 in fl: ULONG): BOOL;

function WinSetMultWindowPos(in hab: HAB;
                                    in pswp: PSWP;
                                    in cswp: ULONG): BOOL;

function WinQueryWindowPos(in hwnd: HWND;
                                  out pswp: SWP): BOOL;

(* Values returned from WM_ADJUSTWINDOWPOS and passed to WM_WINDOWPOSCHANGED *)

const AWP_MINIMIZED              = $00010000;
const AWP_MAXIMIZED              = $00020000;
const AWP_RESTORED               = $00040000;
const AWP_ACTIVATE               = $00080000;
const AWP_DEACTIVATE             = $00100000;

(* WinSetWindowPos() flags *)

const SWP_SIZE                   = $0001;
const SWP_MOVE                   = $0002;
const SWP_ZORDER                 = $0004;
const SWP_SHOW                   = $0008;
const SWP_HIDE                   = $0010;
const SWP_NOREDRAW               = $0020;
const SWP_NOADJUST               = $0040;
const SWP_ACTIVATE               = $0080;
const SWP_DEACTIVATE             = $0100;
const SWP_EXTSTATECHANGE         = $0200;
const SWP_MINIMIZE               = $0400;
const SWP_MAXIMIZE               = $0800;
const SWP_RESTORE                = $1000;
const SWP_FOCUSACTIVATE          = $2000;
const SWP_FOCUSDEACTIVATE        = $4000;
const SWP_NOAUTOCLOSE            = $8000;    (* Valid in PROGDETAILS struct only *)

(* Window painting *)

function WinUpdateWindow(in hwnd: HWND): BOOL;

function WinInvalidateRect(in hwnd: HWND;
                                 in pwrc: PRECTL;
                                 in fIncludeChildren: BOOL): BOOL;

function WinInvalidateRegion(in hwnd: HWND;
                                   in hrgn: HRGN;
                                   in fIncludeChildren: BOOL): BOOL;


(* Drawing helpers *)

function WinInvertRect(in hps: HPS;
                              in prcl: PRECTL): BOOL;

function WinDrawBitmap(in hpsDst: HPS;
                             in hbm: HBITMAP;
                             in pwrcSrc: PRECTL;
                             in pptlDst: PPOINTL;
                             in clrFore: LONG;
                             in clrBack: LONG;
                             in fl: ULONG): BOOL;

(* WinDrawBitmap() flags *)

const DBM_NORMAL                 = $0000;
const DBM_INVERT                 = $0001;
const DBM_HALFTONE               = $0002;
const DBM_STRETCH                = $0004;
const DBM_IMAGEATTRS             = $0008;
const DBM_XOR                    = $0010;



function WinDrawText(in hps: HPS;
                             in cchText: LONG;
                             in lpchText: PCH;
                             in prcl: PRECTL;
                             in clrFore: LONG;
                             in clrBack: LONG;
                             in flCmd: ULONG): LONG;


(*
* WinDrawText()/WinDrawTabbedText() codes:
* From DT_LEFT to DT_EXTERNALLEADING, the codes are designed to be OR'ed with
* SS_TEXT to create variations of the basic text static item.
*)
const DT_LEFT                    = $00000000;
const DT_QUERYEXTENT             = $00000002;
const DT_UNDERSCORE              = $00000010;
const DT_STRIKEOUT               = $00000020;
const DT_TEXTATTRS               = $00000040;
const DT_EXTERNALLEADING         = $00000080;
const DT_CENTER                  = $00000100;
const DT_RIGHT                   = $00000200;
const DT_TOP                     = $00000000;
const DT_VCENTER                 = $00000400;
const DT_BOTTOM                  = $00000800;
const DT_HALFTONE                = $00001000;
const DT_MNEMONIC                = $00002000;
const DT_WORDBREAK               = $00004000;
const DT_ERASERECT               = $00008000;



function WinDrawBorder(in hps: HPS;
                            in prcl: PRECTL;
                            in cx: LONG;
                            in cy: LONG;
                            in clrFore: LONG;
                            in clrBack: LONG;
                            in flCmd: ULONG): BOOL;


(* WinDrawBorder() flags *)

const DB_PATCOPY                 = $0000;
const DB_PATINVERT               = $0001;
const DB_DESTINVERT              = $0002;
const DB_AREAMIXMODE             = $0003;

const DB_ROP                     = $0007;
const DB_INTERIOR                = $0008;
const DB_AREAATTRS               = $0010;
const DB_STANDARD                = $0100;
const DB_DLGBORDER               = $0200;



(** Resource loading functions *)

function WinLoadString(in hab: HAB;
                               in hmod: HMODULE;
                               in id: ULONG;
                               in cchMax: LONG;
                               out  pchBuffer: SZ): LONG;

function  WinLoadMessage(in hab: HAB;
                                   in hmod: HMODULE;
                                   in id: ULONG;
                                   in cchMax: LONG;
                                   out pchBuffer: SZ): LONG;



uses winwindowmgr;
uses winwindowmgrcommon;
uses winmessagemgr;
uses winmessagemgrcommon;
uses winclipboard;
uses winclipboarddde;
uses winframemgrcommon;
uses winframemgr;
uses winsys;
uses wininput;
uses wininputcommon;
uses winerrors;
uses winhooks;
uses windialogscommon;
uses windialogs;
uses winentryfields;
uses pmstddlg;
uses winentryfields;
uses winbuttons;
uses winlistboxes;
uses wincountry;
uses wintimer;

end.
