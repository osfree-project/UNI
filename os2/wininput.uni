module wininput;

function WinSetCapture(hwndDesktop: HWND;
                                   hwnd: HWND): BOOL;

function WinQueryCapture(hwndDesktop: HWND): HWND;

function WinCheckInput(hab: HAB): BOOL;

   (*** Mouse input messages ***********************************************)
   const  WM_MOUSEFIRST           = $0070;
   const  WM_MOUSELAST            = $0079;
   const  WM_BUTTONCLICKFIRST     = $0071;
   const  WM_BUTTONCLICKLAST      = $0079;
const  WM_MOUSEMOVE               = $0070;

const  WM_BUTTON1DOWN             = $0071;

const  WM_BUTTON1UP               = $0072;
const  WM_BUTTON1DBLCLK           = $0073;
const  WM_BUTTON2DOWN             = $0074;
const  WM_BUTTON2UP               = $0075;
const  WM_BUTTON2DBLCLK           = $0076;
   const  WM_BUTTON3DOWN          = $0077;
   const  WM_BUTTON3UP            = $0078;
   const  WM_BUTTON3DBLCLK        = $0079;

   const  WM_MOUSEMAP             = $007D;

   const  WM_EXTMOUSEFIRST        = $0410;
   const  WM_EXTMOUSELAST         = $0419;

   const  WM_CHORD                = $0410;
   const  WM_BUTTON1MOTIONSTART   = $0411;
   const  WM_BUTTON1MOTIONEND     = $0412;
   const  WM_BUTTON1CLICK         = $0413;
   const  WM_BUTTON2MOTIONSTART   = $0414;
   const  WM_BUTTON2MOTIONEND     = $0415;
   const  WM_BUTTON2CLICK         = $0416;
   const  WM_BUTTON3MOTIONSTART   = $0417;
   const  WM_BUTTON3MOTIONEND     = $0418;
   const  WM_BUTTON3CLICK         = $0419;

      (* Messages = $041A - = $041F are reserved *)

   const  WM_MOUSETRANSLATEFIRST  = $0420;
   const  WM_MOUSETRANSLATELAST   = $0428;

   const  WM_BEGINDRAG            = $0420;
   const  WM_ENDDRAG              = $0421;
   const  WM_SINGLESELECT         = $0422;
   const  WM_OPEN                 = $0423;
   const  WM_CONTEXTMENU          = $0424;
   const  WM_CONTEXTHELP          = $0425;
   const  WM_TEXTEDIT             = $0426;
   const  WM_BEGINSELECT          = $0427;
   const  WM_ENDSELECT            = $0428;
   const  WM_PICKUP               = $0429;

   const  WM_PENFIRST             = $04C0;
   const  WM_PENLAST              = $04FF;
   const  WM_MMPMFIRST            = $0500;
   const  WM_MMPMLAST             = $05FF;
   const  WM_STDDLGFIRST          = $0600;
   const  WM_STDDLGLAST           = $065F;

      (* Messages = $0BD0 - = $0BFF are reserved *)
      (* for bidirectional language support.   *)

   const   WM_BIDI_FIRST           = $0BD0;
   const   WM_BIDI_LAST            = $0BFF;


function WinQueryFocus(hwndDesktop: HWND): HWND;


   (*** Key/Character input messages ***************************************)
const  WM_CHAR                    = $007a;
const  WM_VIOCHAR                 = $007b;

   (* WM_CHAR fs field bits *)
const  KC_NONE                    = $0000;     (* Reserved *)
const  KC_CHAR                    = $0001;
const  KC_VIRTUALKEY              = $0002;
const  KC_SCANCODE                = $0004;

const  KC_SHIFT                   = $0008;
const  KC_CTRL                    = $0010;
const  KC_ALT                     = $0020;
const  KC_KEYUP                   = $0040;
const  KC_PREVDOWN                = $0080;
const  KC_LONEKEY                 = $0100;
const  KC_DEADKEY                 = $0200;
const  KC_COMPOSITE               = $0400;
const  KC_INVALIDCOMP             = $0800;

   const  KC_TOGGLE               = $1000;
   const  KC_INVALIDCHAR          = $2000;
   const  KC_DBCSRSRVD1           = $4000;
   const  KC_DBCSRSRVD2           = $8000;

//   #pragma pack(1) (* force structure alignment packing *)

   (*
   * The following structure and macro are used to access the
   * WM_MOUSEMOVE, and WM_BUTTON message parameters
   *)
   type MOUSEMSG=structure    (* mousemsg *)
         x: SHORT;             (* mp1      *)
         y: SHORT;
         codeHitTest: USHORT;   (* mp2      *)
         fsInp: USHORT;         (* input flags *)
     end;
   type MSEMSG=MOUSEMSG;
   type PMSEMSG=^MSEMSG;


   type CHARMSG=structure    (* charmsg *)
        fs: USHORT;           (* mp1     *)
        cRepeat: UCHAR;
        scancode: UCHAR;
        chr: USHORT;          (* mp2     *)
        vkey: USHORT;
     end;
   type CHRMSG=CHARMSG;
   type PCHRMSG=^CHRMSG;


//   #pragma pack()  (* restore packing to default *)

const  INP_NONE                   = $0000;
const  INP_KBD                    = $0001;
const  INP_MULT                   = $0002;
const  INP_RES2                   = $0004;
const  INP_SHIFT                  = $0008;
const  INP_CTRL                   = $0010;
const  INP_ALT                    = $0020;
const  INP_RES3                   = $0040;
const  INP_RES4                   = $0080;
const  INP_IGNORE                 = $FFFF;

   (*** Virtual key values *************************************************)
const  VK_BUTTON1                 = $01;
const  VK_BUTTON2                 = $02;
const  VK_BUTTON3                 = $03;
const  VK_BREAK                   = $04;
const  VK_BACKSPACE               = $05;
const  VK_TAB                     = $06;
const  VK_BACKTAB                 = $07;
const  VK_NEWLINE                 = $08;
const  VK_SHIFT                   = $09;
const  VK_CTRL                    = $0A;
const  VK_ALT                     = $0B;
const  VK_ALTGRAF                 = $0C;
const  VK_PAUSE                   = $0D;
const  VK_CAPSLOCK                = $0E;
const  VK_ESC                     = $0F;
const  VK_SPACE                   = $10;
const  VK_PAGEUP                  = $11;
const  VK_PAGEDOWN                = $12;
const  VK_END                     = $13;
const  VK_HOME                    = $14;
const  VK_LEFT                    = $15;
const  VK_UP                      = $16;
const  VK_RIGHT                   = $17;
const  VK_DOWN                    = $18;
const  VK_PRINTSCRN               = $19;
const  VK_INSERT                  = $1A;
const  VK_DELETE                  = $1B;
const  VK_SCRLLOCK                = $1C;
const  VK_NUMLOCK                 = $1D;
const  VK_ENTER                   = $1E;
const  VK_SYSRQ                   = $1F;
const  VK_F1                      = $20;
const  VK_F2                      = $21;
const  VK_F3                      = $22;
const  VK_F4                      = $23;
const  VK_F5                      = $24;
const  VK_F6                      = $25;
const  VK_F7                      = $26;
const  VK_F8                      = $27;
const  VK_F9                      = $28;
const  VK_F10                     = $29;
const  VK_F11                     = $2A;
const  VK_F12                     = $2B;
const  VK_F13                     = $2C;
const  VK_F14                     = $2D;
const  VK_F15                     = $2E;
const  VK_F16                     = $2F;
const  VK_F17                     = $30;
const  VK_F18                     = $31;
const  VK_F19                     = $32;
const  VK_F20                     = $33;
const  VK_F21                     = $34;
const  VK_F22                     = $35;
const  VK_F23                     = $36;
const  VK_F24                     = $37;
const  VK_ENDDRAG                 = $38;
const  VK_CLEAR                   = $39;
const  VK_EREOF                   = $3A;
const  VK_PA1                     = $3B;
const  VK_ATTN                    = $3C;
const  VK_CRSEL                   = $3D;
const  VK_EXSEL                   = $3E;
const  VK_COPY                    = $3F;
const  VK_BLK1                    = $40;
const  VK_BLK2                    = $41;


const  VK_MENU                  =  VK_F10;

   const  VK_DBCSFIRST            = $0080;
   const  VK_DBCSLAST             = $00ff;

      (* VK_ vluaes = $E0 - = $FF are reserved   *)
      (* for bidirectional language support.   *)

   const  VK_BIDI_FIRST           = $E0;
   const  VK_BIDI_LAST            = $FF;


const  VK_USERFIRST               = $0100;
const  VK_USERLAST                = $01ff;


function WinGetKeyState(hwndDesktop: HWND;
                                    vkey: LONG): LONG;
function WinGetPhysKeyState( hwndDesktop: HWND;
                                        sc: LONG): LONG;
function WinEnablePhysInput( hwndDesktop: HWND;
                                         fEnable: BOOL): BOOL;
function WinIsPhysInputEnabled( hwndDesktop: HWND): BOOL;

function WinSetKeyboardStateTable(hwndDesktop: HWND;
                                               pKeyStateTable: PBYTE;
                                               fSet: BOOL): BOOL;


      (* Journal Notification messages  *)
   const  WM_JOURNALNOTIFY           = $007c;

      (*** Define the valid commands (lParm1) for journal notify message *)
   const  JRN_QUEUESTATUS            = $00000001;
   const  JRN_PHYSKEYSTATE           = $00000002;

end.

