module rexxsaa;

(*********************************************************************)
(*                                                                   *)
(*                            Common                                 *)
(*                                                                   *)
(*********************************************************************)

(* This section defines return codes and constants that are the      *)
(* same for both 16-bit and 32-bit REXX calls.                       *)

(***    Structure for external interface string (RXSTRING) *)

type RXSTRING=structure          (* rxstr *)
        strlength: ULONG;           (*   length of string         *)
        strptr: PCH;              (*   pointer to string        *)
  end;

type PRXSTRING=^RXSTRING;       (* pointer to a RXSTRING      *)

const RXAUTOBUFLEN     =    256;


(***    Structure for system exit block (RXSYSEXIT) 32-bit *)

type RXSYSEXIT=structure            (* syse *)
      sysexit_name: PSZ;                  (* subcom enviro for sysexit  *)
      sysexit_code: LONG;                 (* sysexit function code      *)
  end;

type PRXSYSEXIT=^RXSYSEXIT;         (* pointer to a RXSYSEXIT     *)


(***    Macros for RXSTRING manipulation                   *)

(*
const RXNULLSTRING(r)      (!(r).strptr)
const RXZEROLENSTRING(r)   ((r).strptr && !(r).strlength)
const RXVALIDSTRING(r)     ((r).strptr && (r).strlength)
const RXSTRLEN(r)          (RXNULLSTRING(r)?0L:(r).strlength)
const RXSTRPTR(r)          (r).strptr
const MAKERXSTRING(r,p,l)  {(r).strptr=(PCH)p;(r).strlength=(ULONG)l;}
*)

(*** Call type codes for use on interpreter startup                  *)
const RXCOMMAND       =0;              (* Program called as Command  *)
const RXSUBROUTINE    =1;              (* Program called as Subroutin*)
const RXFUNCTION      =2;              (* Program called as Function *)

(***    Subcommand Interface defines*)
(* #ifdef INCL_RXSUBCOM *)


(***    Drop Authority for RXSUBCOM interface *)

const RXSUBCOM_DROPPABLE   = $00;     (* handler to be dropped by all*)
const RXSUBCOM_NONDROP     = $01;     (* process with same PID as the*)
                                      (* registrant may drop environ *)

(***    Return Codes from RXSUBCOM interface *)

const RXSUBCOM_ISREG       = $01;     (* Subcommand is registered    *)
const RXSUBCOM_ERROR       = $01;     (* Subcommand Ended in Error   *)
const RXSUBCOM_FAILURE     = $02;     (* Subcommand Ended in Failure *)
const RXSUBCOM_BADENTRY    = 1001;     (* Invalid Entry Conditions    *)
const RXSUBCOM_NOEMEM      = 1002;     (* Insuff stor to complete req *)
const RXSUBCOM_BADTYPE     = 1003;     (* Bad registration type.      *)
const RXSUBCOM_NOTINIT     = 1004;     (* API system not initialized. *)
const RXSUBCOM_OK          =  0;       (* Function Complete           *)
const RXSUBCOM_DUP         = 10;       (* Duplicate Environment Name- *)
                                      (* but Registration Completed  *)
const RXSUBCOM_MAXREG      = 20;       (* Cannot register more        *)
                                      (* handlers                    *)
const RXSUBCOM_NOTREG      = 30;       (* Name Not Registered         *)
const RXSUBCOM_NOCANDROP   = 40;       (* Name not droppable          *)
const RXSUBCOM_LOADERR     = 50;       (* Could not load function     *)
const RXSUBCOM_NOPROC      =127;       (* RXSUBCOM routine - not found*)

(* #endif INCL_RXSUBCOM for defines *)

(***    Shared Variable Pool Interface defines *)
(* #ifdef INCL_RXSHV *)

(***    Function Codes for Variable Pool Interface (shvcode) *)

const RXSHV_SET          = $00;       (* Set var from given value    *)
const RXSHV_FETCH        = $01;       (* Copy value of var to buffer *)
const RXSHV_DROPV        = $02;       (* Drop variable               *)
const RXSHV_SYSET        = $03;       (* Symbolic name Set variable  *)
const RXSHV_SYFET        = $04;       (* Symbolic name Fetch variable*)
const RXSHV_SYDRO        = $05;       (* Symbolic name Drop variable *)
const RXSHV_NEXTV        = $06;       (* Fetch "next" variable       *)
const RXSHV_PRIV         = $07;       (* Fetch private information   *)
const RXSHV_EXIT         = $08;       (* Set function exit value     *)

(***    Return Codes for Variable Pool Interface *)

const RXSHV_NOAVL        = 144;       (* Interface not available     *)

(***    Return Code Flags for Variable Pool Interface (shvret) *)

const RXSHV_OK           = $00;       (* Execution was OK            *)
const RXSHV_NEWV         = $01;       (* Variable did not exist      *)
const RXSHV_LVAR         = $02;       (* Last var trans via SHVNEXTV *)
const RXSHV_TRUNC        = $04;       (* Truncation occurred-Fetch   *)
const RXSHV_BADN         = $08;       (* Invalid variable name       *)
const RXSHV_MEMFL        = $10;       (* Out of memory failure       *)
const RXSHV_BADF         = $80;       (* Invalid funct code (shvcode)*)


(***    Structure of Shared Variable Request Block (SHVBLOCK) *)

type SHVBLOCK=structure            (* shvb *)
    shvnext: PVOID;       (* pointer to the next block   *)
    shvname: RXSTRING;       (* Pointer to the name buffer  *)
    shvvalue: RXSTRING;      (* Pointer to the value buffer *)
    shvnamelen: ULONG;    (* Length of the name value    *)
    shvvaluelen: ULONG;   (* Length of the fetch value   *)
    shvcode: UCHAR;       (* Function code for this block*)
    shvret: UCHAR;        (* Individual Return Code Flags*)
  end;

type PSHVBLOCK=^SHVBLOCK;


(* #endif INCL_RXSHV for defines *)

(***    External Function Interface *)
(* #ifdef INCL_RXFUNC *)

(***    Registration Type Identifiers for Available Function Table *)

const RXFUNC_DYNALINK     =  1;        (* Function Available in DLL  *)
const RXFUNC_CALLENTRY    =  2;        (* Registered as mem entry pt.*)


(***    Return Codes from RxFunction interface *)


const RXFUNC_OK           =  0;        (* REXX-API Call Successful   *)
const RXFUNC_DEFINED      = 10;        (* Function Defined in AFT    *)
const RXFUNC_NOMEM        = 20;        (* Not Enough Mem to Add      *)
const RXFUNC_NOTREG       = 30;        (* Funct Not Registered in AFT*)
const RXFUNC_MODNOTFND    = 40;        (* Funct Dll Module Not Found *)
const RXFUNC_ENTNOTFND    = 50;        (* Funct Entry Point Not Found*)
const RXFUNC_NOTINIT      = 60;        (* API not initialized        *)
const RXFUNC_BADTYPE      = 70;        (* Bad function type          *)
(* #endif INCL_RXFUNC for defines *)

(***   System Exits defines *)
(* #ifdef INCL_RXSYSEXIT *)

(***    Drop Authority for Rexx Exit interface *)

const RXEXIT_DROPPABLE     = $00;     (* handler to be dropped by all*)
const RXEXIT_NONDROP       = $01;     (* process with same PID as the*)
                                      (* registrant may drop environ *)


(***    Exit return actions *)

const RXEXIT_HANDLED      = 0;        (* Exit handled exit event     *)
const RXEXIT_NOT_HANDLED  = 1;        (* Exit passes on exit event   *)
const RXEXIT_RAISE_ERROR  = (-1);     (* Exit handler error occurred *)

(***    Return Codes from RXEXIT interface *)

const RXEXIT_ISREG         = $01;     (* Exit is registered          *)
const RXEXIT_ERROR         = $01;     (* Exit Ended in Error         *)
const RXEXIT_FAILURE       = $02;     (* Exit Ended in Failure       *)
const RXEXIT_BADENTRY    =  1001 ;    (* Invalid Entry Conditions    *)
const RXEXIT_NOEMEM      =  1002 ;    (* Insuff stor to complete req *)
const RXEXIT_BADTYPE     =  1003 ;    (* Bad registration type.      *)
const RXEXIT_NOTINIT     =  1004 ;    (* API system not initialized. *)
const RXEXIT_OK          =   0   ;    (* Function Complete           *)
const RXEXIT_DUP         =  10   ;    (* Duplicate Exit Name-        *)
                                      (* but Registration Completed  *)
const RXEXIT_MAXREG      =  20   ;    (* Cannot register more        *)
                                      (* handlers                    *)
const RXEXIT_NOTREG      =  30   ;    (* Name Not Registered         *)
const RXEXIT_NOCANDROP   =  40   ;    (* Name not droppable          *)
const RXEXIT_LOADERR     =  50   ;    (* Could not load function     *)
const RXEXIT_NOPROC      = 127   ;    (* RXEXIT routine - not found  *)



(* System Exit function and sub-function definitions *)

const RXENDLST   = 0;                 (* End of exit list.           *)
const RXFNC   = 2;                    (* Process external functions. *)
const    RXFNCCAL= 1;                 (* subcode value.              *)
const RXCMD   = 3;                    (* Process host commands.      *)
const    RXCMDHST= 1;                 (* subcode value.              *)
const RXMSQ   = 4;                    (* Manipulate queue.           *)
const    RXMSQPLL= 1;                 (* Pull a line from queue      *)
const    RXMSQPSH= 2;                 (* Place a line on queue       *)
const    RXMSQSIZ= 3;                 (* Return num of lines on queue*)
const    RXMSQNAM= 20;                (* Set active queue name       *)
const RXSIO   = 5;                    (* Session I/O.                *)
const    RXSIOSAY= 1;                 (* SAY a line to STDOUT        *)
const    RXSIOTRC= 2;                 (* Trace output                *)
const    RXSIOTRD= 3;                 (* Read from char stream       *)
const    RXSIODTR= 4;                 (* DEBUG read from char stream *)
const    RXSIOTLL= 5;                 (* Return linelength(N/A OS/2) *)
const RXHLT   = 7;                    (* Halt processing.            *)
const    RXHLTCLR= 1;                 (* Clear HALT indicator        *)
const    RXHLTTST= 2;                 (* Test HALT indicator         *)
const RXTRC   = 8;                    (* Test ext trace indicator.   *)
const    RXTRCTST= 1;                 (* subcode value.              *)
const RXINI   = 9;                    (* Initialization processing.  *)
const    RXINIEXT= 1;                 (* subcode value.              *)
const RXTER   =10;                    (* Termination processing.     *)
const    RXTEREXT= 1;                 (* subcode value.              *)
const RXNOOFEXITS= 11;                (* 1 + largest exit number.    *)

type PEXIT=PUCHAR;                 (* ptr to exit parameter block *)
(* #endif INCL_RXSYSEXIT for defines *)

(***    Asynchronous Request Interface defines *)
(* #ifdef INCL_RXARI *)

(***    Return Codes from Asynchronous Request interface *)

const RXARI_OK               =    0;  (* Interface completed         *)
const RXARI_NOT_FOUND        =    1;  (* Target program not found    *)
const RXARI_PROCESSING_ERROR =    2;  (* Error processing request    *)
(* #endif  INCL_RXARI for defines *)

(***    Macro Space Interface defines *)
(* #ifdef INCL_RXMACRO *)

(***    Registration Search Order Flags *)

const RXMACRO_SEARCH_BEFORE     =  1;  (* Beginning of search order  *)
const RXMACRO_SEARCH_AFTER      =  2;  (* End of search order        *)


(***    Return Codes from RxMacroSpace interface *)

const RXMACRO_OK                 =0;  (* Macro interface completed   *)
const RXMACRO_NO_STORAGE         =1;  (* Not Enough Storage Available*)
const RXMACRO_NOT_FOUND          =2;  (* Requested function not found*)
const RXMACRO_EXTENSION_REQUIRED =3;  (* File ext required for save  *)
const RXMACRO_ALREADY_EXISTS     =4;  (* Macro functions exist       *)
const RXMACRO_FILE_ERROR         =5;  (* File I/O error in save/load *)
const RXMACRO_SIGNATURE_ERROR    =6;  (* Incorrect format for load   *)
const RXMACRO_SOURCE_NOT_FOUND   =7;  (* Requested cannot be found   *)
const RXMACRO_INVALID_POSITION   =8;  (* Invalid search order pos    *)
const RXMACRO_NOT_INIT           =9;  (* API not initialized         *)
(* #endif INCL_RXMACRO for defines *)

(*********************************************************************)
(*                                                                   *)
(*                            32-bit                                 *)
(*                                                                   *)
(*********************************************************************)

(***    Main Entry Point to the REXXSAA Interpreter *)


function RexxStart(ArgC: LONG;                        (* Num of args passed to rexx *)
         ArgV: PRXSTRING;                    (* Array of args passed to rex *)
         Path: PCSZ;                          (* [d:][path] filename[.ext]  *)
         Storage: PRXSTRING;                    (* Loc of rexx proc in memory *)
         Env: PCSZ;                          (* ASCIIZ initial environment.*)
         Typ: LONG;                        (* type (command,subrtn,funct) *)
         SysExit: PRXSYSEXIT;                   (* SysExit env. names &  codes *)
         RetCode: PSHORT;                       (* Ret code from if numeric   *)
         RetValue: PRXSTRING): LONG;                  (* Retvalue from the rexx proc *)


(***    Subcommand Interface *)
(* #ifdef INCL_RXSUBCOM *)


(* This type simplifies coding of a Subcommand handler.           *)
type RexxSubcomHandler=function(str: PRXSTRING;
                                pus: PUSHORT;
                                prxstr: PRXSTRING): ULONG;

(***   RexxRegisterSubcomDll -- Register a DLL entry point           *)
(***   as a Subcommand handler *)

function RexxRegisterSubcomDll(Name : PCSZ ;                          (* Name of subcom handler     *)
         DllName: PCSZ;                          (* Name of DLL                *)
         ProcName: PCSZ;                          (* Name of procedure in DLL   *)
         UserArea: PUCHAR;                       (* User area                  *)
         Drop: ULONG  ): APIRET;                     (* Drop authority.            *)


(***   RexxRegisterSubcomExe -- Register an EXE entry point          *)
(***   as a Subcommand handler *)

function RexxRegisterSubcomExe(Name: PCSZ;                          (* Name of subcom handler     *)
         Addr: PFN;                          (* address of handler in EXE  *)
         UserArea: PUCHAR): APIRET;                      (* User area                  *)



(***    RexxQuerySubcom - Query an environment for Existance *)

function RexxQuerySubcom(EnvName: PCSZ;                          (* Name of the Environment    *)
         DLLName: PCSZ;                          (* DLL Module Name            *)
         Storage: PUSHORT;                      (* Stor for existance code    *)
         UserWord: PUCHAR): APIRET;                     (* Stor for user word         *)

(***    RexxDeregisterSubcom - Drop registration of a Subcommand     *)
(***    environment *)

function RexxDeregisterSubcom(EnvName: PCSZ;                          (* Name of the Environment    *)
         DllName: PCSZ): APIRET;                        (* DLL Module Name            *)


(* #endif INCL_RXSUBCOM *)



(***    Shared Variable Pool Interface *)
(* #ifdef INCL_RXSHV *)


(***    RexxVariablePool - Request Variable Pool Service *)

function RexxVariablePool(pshv: PSHVBLOCK): APIRET;                  (* Pointer to list of SHVBLOCKs *)


(* #endif INCL_RXSHV *)


(***    External Function Interface *)
(* #ifdef INCL_RXFUNC *)

(* This type simplifies coding of an External Function.           *)
type RexxFunctionHandler=function(a: PUCHAR;
                                  b: ULONG;
                                  c: PRXSTRING;
                                  d: PSZ;
                                  e: PRXSTRING): ULONG;

(***    RexxRegisterFunctionDll - Register a function in the AFT *)

function RexxRegisterFunctionDll(FuncName: PCSZ;                           (* Name of function to add    *)
        DllName: PCSZ;                           (* Dll file name (if in dll)  *)
        DllEntry: PCSZ): APIRET;                          (* Entry in dll               *)


(***    RexxRegisterFunctionExe - Register a function in the AFT *)

function RexxRegisterFunctionExe(FuncName: PCSZ;                           (* Name of function to add    *)
        Addr: PFN): APIRET;                          (* Entry point in EXE         *)

(***    RexxDeregisterFunction - Delete a function from the AFT *)

function RexxDeregisterFunction(FuncName: PCSZ): APIRET;                         (* Name of function to remove *)


(***    RexxQueryFunction - Scan the AFT for a function *)

function RexxQueryFunction(FuncName: PCSZ): APIRET;                         (* Name of function to find   *)


(* #endif INCL_RXFUNC *)


(***   System Exits *)
(* #ifdef INCL_RXSYSEXIT *)

(***    Subfunction RXFNCCAL - External Function Calls *)

type RXFNC_FLAGS=structure          (* fl *)
   rxfferr: ULONG ;              (* Invalid call to routine.   *)
   rxffnfnd: ULONG ;              (* Function not found.        *)
   rxffsub: ULONG ;              (* Called as a subroutine     *)
  end;

type RXFNCCAL_PARM=structure        (* fnc *)
   rxfnc_flags: RXFNC_FLAGS ;     (* function flags             *)
   rxfnc_name: PUCHAR;       (* Pointer to function name.  *)
   rxfnc_namel: USHORT;      (* Length of function name.   *)
   rxfnc_que: PUCHAR;        (* Current queue name.        *)
   rxfnc_quel: USHORT;       (* Length of queue name.      *)
   rxfnc_argc: USHORT;       (* Number of args in list.    *)
   rxfnc_argv: PRXSTRING;       (* Pointer to argument list.  *)
   rxfnc_retc: RXSTRING;       (* Return value.              *)
  end;


(***    Subfunction RXCMDHST -- Process Host Commands     *)

type RXCMD_FLAGS=structure          (* fl *)
   rxfcfail: ULONG;              (* Command failed.            *)
   rxfcerr: ULONG;              (* Command ERROR occurred.    *)
  end;

type RXCMDHST_PARM= structure        (* rx *)
   rxcmd_flags: RXCMD_FLAGS;      (* error/failure flags        *)
   rxcmd_address: PUCHAR;    (* Pointer to address name.   *)
   rxcmd_addressl: USHORT;   (* Length of address name.    *)
   rxcmd_dll: PUCHAR;        (* dll name for command.      *)
   rxcmd_dll_len: USHORT;    (* Length of dll name.        *)
   rxcmd_command: RXSTRING;    (* The command string.        *)
   rxcmd_retc: RXSTRING;       (* Pointer to return buffer   *)
  end;


(***     Subfunction RXMSQPLL -- Pull Entry from Queue *)

type RXMSQPLL_PARM=structure        (* pll *)
             rxmsq_retc: RXSTRING;       (* Pointer to dequeued entry  *)
                                       (* buffer.  User allocated.   *)
  end;


(***    Subfunction RXMSQPSH -- Push Entry on Queue *)

type RXMSQ_FLAGS=structure          (* fl *)
   rxfmlifo: ULONG ;              (* Stack entry LIFO if set    *)
  end;

type RXMSQPSH_PARM=structure        (* psh *)
          rxmsq_flags: RXMSQ_FLAGS;      (* LIFO/FIFO flag             *)
          rxmsq_value: RXSTRING;      (* The entry to be pushed.    *)
  end;


(***    Subfunction RXMSQSIZ -- Return the Current Queue Size *)

type RXMSQSIZ_PARM=structure        (* siz *)
       rxmsq_size: ULONG;       (* Number of Lines in Queue   *)
  end;


(***    Subfunction RXMSQNAM -- Set Current Queue Name *)

type RXMSQNAM_PARM=structure        (* nam *)
             rxmsq_name: RXSTRING;       (* RXSTRING containing        *)
                                       (* queue name.                *)
 end;


(***    Subfunction RXSIOSAY -- Perform SAY Clause *)

type RXSIOSAY_PARM=structure        (* say *)
       rxsio_string: RXSTRING;     (* String to display.         *)
  end;


(***    Subfunction RXSIOTRC -- Write Trace Output *)

type RXSIOTRC_PARM=structure (* trcparm *)
        rxsio_string: RXSTRING;     (* Trace line to display.     *)
  end;


(***    Subfunction RXSIOTRD -- Read Input from the Terminal *)

type RXSIOTRD_PARM=structure        (* trd *)
       rxsiotrd_retc: RXSTRING;    (* RXSTRING for output.       *)
  end;


(***    Subfunction RXSIODTR -- Read Debug Input from the Terminal *)

type RXSIODTR_PARM=structure        (* dtr *)
       rxsiodtr_retc: RXSTRING;    (* RXSTRING for output.       *)
  end;


(***    Subfunction RXHSTTST -- Test for HALT Condition *)

type RXHLT_FLAGS=structure          (* fl Halt flag               *)
    rxfhhalt: ULONG;              (* Set if HALT occurred.      *)
  end;

type RXHLTTST_PARM=structure        (* tst *)
       rxhlt_flags: RXHLT_FLAGS;            (* Set if HALT occurred       *)
  end;


(***    Subfunction RXTRCTST -- Test for TRACE Condition *)

type RXTRC_FLAGS=structure          (* fl Trace flags             *)
       rxftrace: ULONG;              (* Set to run external trace. *)
  end;

type RXTRCTST_PARM=structure        (* tst *)
       rxtrc_flags: RXTRC_FLAGS;            (* Set to run external trace  *)
  end;


(* This type simplifies coding of an Exit handler.                *)
type RexxExitHandler=function(a: LONG;
                              b: LONG;
                              c: PEXIT): LONG;

(***      RexxRegisterExitDll - Register a system exit. *)

function RexxRegisterExitDll(Name: PCSZ;                          (* Name of the exit handler   *)
         DllName: PCSZ;                          (* Name of the DLL            *)
         ProcName: PCSZ;                          (* Name of the procedure      *)
         UserArea: PUCHAR;                       (* User area                  *)
         Drop: ULONG): APIRET;                      (* Drop authority             *)


(***      RexxRegisterExitExe - Register a system exit. *)

function RexxRegisterExitExe(Name: PCSZ;                          (* Name of the exit handler   *)
         pf: PFN,                          (* Address of exit handler    *)
         UserArea: PUCHAR): APIRET;                      (* User area                  *)


(***    RexxDeregisterExit - Drop registration of a system exit. *)

function RexxDeregisterExit(Name: PCSZ;                          (* Exit name                  *)
         DllName: PCSZ): APIRET;                       (* DLL module name            *)




(***    RexxQueryExit - Query an exit for existance. *)

function RexxQueryExit(Name: PCSZ;                          (* Exit name                  *)
         DllName: PCSZ;                          (* DLL Module name.           *)
         Flag: PUSHORT;                      (* Existance flag.            *)
         UserData: PUCHAR): APIRET;                     (* User data.                 *)



(* #endif  INCL_RXSYSEXIT *)


(***    Asynchronous Request Interface *)
(* #ifdef INCL_RXARI *)

(***    RexxSetHalt - Request Program Halt *)

function RexxSetHalt(pid:PID;                         (* Process Id                  *)
         tid: TID): APIRET;                        (* Thread Id                   *)


(***    RexxSetTrace - Request Program Trace *)

function RexxSetTrace(pid: PID;                         (* Process Id                  *)
         tid: TID): APIRET;                        (* Thread Id                   *)

(***    RexxResetTrace - Turn Off Program Trace *)

function RexxResetTrace(pid: PID;                         (* Process Id                  *)
         tid: TID): APIRET;                        (* Thread Id                   *)


(* #endif INCL_RXARI *)


(***    Macro Space Interface *)
(* #ifdef INCL_RXMACRO *)


(***    RexxAddMacro - Register a function in the Macro Space        *)

function RexxAddMacro(Func: PCSZ;                         (* Function to add or change   *)
         Name: PCSZ;                         (* Name of file to get function*)
         Flag: ULONG): APIRET;                    (* Flag indicating search pos  *)

(***    RexxDropMacro - Remove a function from the Macro Space       *)

function RexxDropMacro(Name: PCSZ): APIRET;                        (* Name of function to remove *)


(***    RexxSaveMacroSpace - Save Macro Space functions to a file    *)

function RexxSaveMacroSpace(argc: ULONG;                      (* Argument count (0==save all) *)
         funcnames: ^PCSZ;                       (* List of funct names to save *)
         FileName: PCSZ): APIRET;                        (* File to save functions in   *)

(***    RexxLoadMacroSpace - Load Macro Space functions from a file  *)

function RexxLoadMacroSpace(Argc: ULONG;                      (* Argument count (0==load all) *)
         FuncNames: ^PCSZ;                       (* List of funct names to load *)
         FileName: PCSZ): APIRET;                        (* File to load functions from *)

(***    RexxQueryMacro - Find a function's search-order position     *)

function RexxQueryMacro(Func: PCSZ;                         (* Function to search for      *)
         Ptr: PUSHORT): APIRET;                   (* Ptr for position flag return *)

(***    RexxReorderMacro - Change a function's search-order          *)
(***                            position                             *)

function RexxReorderMacro(Func: PCSZ;                         (* Name of funct change order  *)
         Pos: ULONG): APIRET;                    (* New position for function   *)

(***    RexxClearMacroSpace - Remove all functions from a MacroSpace *)

function RexxClearMacroSpace(): APIRET;                      (* No Arguments.               *)

(* #endif INCL_RXMACRO *)

end.
